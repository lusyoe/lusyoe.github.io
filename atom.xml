<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风格</title>
  <subtitle>风起于青萍之末</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lusyoe.github.io/"/>
  <updated>2016-10-07T00:27:14.517Z</updated>
  <id>https://lusyoe.github.io/</id>
  
  <author>
    <name>卢浩元</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决Hibernate使用HQL查询出现is not mapped问题</title>
    <link href="https://lusyoe.github.io/2016/10/07/%E8%A7%A3%E5%86%B3Hibernate%E4%BD%BF%E7%94%A8HQL%E6%9F%A5%E8%AF%A2%E5%87%BA%E7%8E%B0is-not-mapped%E9%97%AE%E9%A2%98/"/>
    <id>https://lusyoe.github.io/2016/10/07/解决Hibernate使用HQL查询出现is-not-mapped问题/</id>
    <published>2016-10-07T00:26:16.000Z</published>
    <updated>2016-10-07T00:27:14.517Z</updated>
    
    <content type="html"><![CDATA[<p>环境：Hibernate 5.1.0.Final，IntelliJ IDEA 2016.2.2</p>
<p>首先检查实体Bean配置一切正常，检查映射配置文件和hibernate.cfg.xml配置文件也是正常的。<br>通过搜索都说是HQL查询根据的是实体名而不是表名查找的，那个我也是对的，实在想不通会出现<strong>is not mapped</strong>问题。异常信息如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> org.hibernate.hql.internal.ast.QuerySyntaxException: UsersEntity is not mapped [FROM UsersEntity ]</span><br><span class="line">    at org.hibernate.hql.internal.ast.QuerySyntaxException.generateQueryException(QuerySyntaxException.java:<span class="number">79</span>)</span><br><span class="line">    at org.hibernate.QueryException.wrapWithQueryString(QueryException.java:<span class="number">103</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:<span class="number">218</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:<span class="number">142</span>)</span><br><span class="line">    at org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:<span class="number">115</span>)</span><br><span class="line">    at org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:<span class="number">76</span>)</span><br><span class="line">    at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:<span class="number">150</span>)</span><br><span class="line">    at org.hibernate.internal.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:<span class="number">302</span>)</span><br><span class="line">    at org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:<span class="number">240</span>)</span><br><span class="line">    at org.hibernate.internal.SessionImpl.createQuery(SessionImpl.java:<span class="number">1907</span>)</span><br><span class="line">    at TestHibernate.main(TestHibernate.java:<span class="number">18</span>)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class="number">147</span>)</span><br><span class="line">Caused by: org.hibernate.hql.internal.ast.QuerySyntaxException: UsersEntity is not mapped</span><br><span class="line">    at org.hibernate.hql.internal.ast.util.SessionFactoryHelper.requireClassPersister(SessionFactoryHelper.java:<span class="number">171</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.tree.FromElementFactory.addFromElement(FromElementFactory.java:<span class="number">91</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.tree.FromClause.addFromElement(FromClause.java:<span class="number">79</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.HqlSqlWalker.createFromElement(HqlSqlWalker.java:<span class="number">321</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.fromElement(HqlSqlBaseWalker.java:<span class="number">3704</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.fromElementList(HqlSqlBaseWalker.java:<span class="number">3593</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.fromClause(HqlSqlBaseWalker.java:<span class="number">718</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:<span class="number">574</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:<span class="number">311</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:<span class="number">259</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:<span class="number">262</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:<span class="number">190</span>)</span><br><span class="line">    ... <span class="number">13</span> more</span><br></pre></td></tr></table></figure></p>
<p>最后仔细排查才发现是被IDE给坑了。。</p>
<p>我是通过IDEA自动生成的Session工厂类和映射配置文件，问题就出在IDE自动生成的那个获取Session的工厂类上。以下是IDE自动生成类的完整内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SessionFactory ourSessionFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ServiceRegistry serviceRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">            configuration.configure();</span><br><span class="line"></span><br><span class="line">            serviceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).build();</span><br><span class="line">            ourSessionFactory = configuration.buildSessionFactory(serviceRegistry);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ourSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">    public static void main(final String[] args) throws Exception &#123;</span><br><span class="line">        final Session session = getSession();</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println("querying all the managed entities...");</span><br><span class="line">            final Map metadataMap = session.getSessionFactory().getAllClassMetadata();</span><br><span class="line">            for (Object key : metadataMap.keySet()) &#123;</span><br><span class="line">                final ClassMetadata classMetadata = (ClassMetadata) metadataMap.get(key);</span><br><span class="line">                final String entityName = classMetadata.getEntityName();</span><br><span class="line">                final Query query = session.createQuery("from " + entityName);</span><br><span class="line">                System.out.println("executing: " + query.getQueryString());</span><br><span class="line">                for (Object o : query.list()) &#123;</span><br><span class="line">                    System.out.println("  " + o);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我只是简单的将main方法注释掉了，其实问题就是出在<strong>serviceRegistry</strong>上面的，只要移除掉这个就好了。<br>修改后为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SessionFactory ourSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">            configuration.configure();</span><br><span class="line"></span><br><span class="line">            ourSessionFactory = configuration.buildSessionFactory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ourSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>因为才刚开始学，具体的原因还没有进行分析，以后有时间再慢慢查找资料阅读源码分析吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境：Hibernate 5.1.0.Final，IntelliJ IDEA 2016.2.2&lt;/p&gt;
&lt;p&gt;首先检查实体Bean配置一切正常，检查映射配置文件和hibernate.cfg.xml配置文件也是正常的。&lt;br&gt;通过搜索都说是HQL查询根据的是实体名而不是表名查
    
    </summary>
    
      <category term="Hibernate" scheme="https://lusyoe.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="https://lusyoe.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate+JNDI配置</title>
    <link href="https://lusyoe.github.io/2016/10/05/Hibernate-JNDI%E9%85%8D%E7%BD%AE/"/>
    <id>https://lusyoe.github.io/2016/10/05/Hibernate-JNDI配置/</id>
    <published>2016-10-05T09:08:38.000Z</published>
    <updated>2016-10-05T09:21:14.612Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始使用JNDI，网上也查了不少资料，磕磕盼盼鼓捣了大半天才成功，在此记录一下。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>首先还是再啰嗦两句，介绍一下JNDI技术。<br>JNDI是Java 命名和目录接口（Java Naming and Directory Interface，JNDI）的简称.从一开始就一直是 JavaEE 企业的核心技术之一。在JMS，JMail,JDBC,EJB等技术中，就大量应用的这种技术。</p>
<h2 id="服务端容器配置-基于Tomcat"><a href="#服务端容器配置-基于Tomcat" class="headerlink" title="服务端容器配置(基于Tomcat)"></a>服务端容器配置(基于Tomcat)</h2><p>修改<strong>conf/server.xml</strong>文件，在<strong>GlobalNamingResources</strong>节点中添加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"jdbc/bookshop"</span> <span class="attr">auth</span>=<span class="string">"Container"</span></span><br><span class="line">                <span class="attr">scope</span>=<span class="string">"jdbc/bookshop"</span></span><br><span class="line">                <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span><br><span class="line">                <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span><br><span class="line">                <span class="attr">url</span>=<span class="string">"jdbc:mysql://192.168.1.2:3306/bookshop"</span></span><br><span class="line">                <span class="attr">username</span>=<span class="string">"root"</span></span><br><span class="line">                <span class="attr">password</span>=<span class="string">"lu123"</span></span><br><span class="line">                <span class="attr">maxActive</span>=<span class="string">"50"</span></span><br><span class="line">                <span class="attr">maxIdle</span>=<span class="string">"30"</span></span><br><span class="line">                <span class="attr">maxWait</span>=<span class="string">"10000"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后接着再修改<strong>conf/context.xml</strong>文件，在<strong>Context</strong>节点中添加引用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceLink</span></span><br><span class="line">            <span class="attr">global</span>=<span class="string">"jdbc/bookshop"</span></span><br><span class="line">            <span class="attr">name</span>=<span class="string">"jdbc/bookshop"</span></span><br><span class="line">            <span class="attr">auth</span>=<span class="string">"Container"</span></span><br><span class="line">            <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>很简单，这个服务器就配置好了，最后还需要重启一下tomcat服务，别忘啦。。接下来再看看项目配置。</p>
<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p>项目只是一个简单的测试Demo，首先看看<strong>pom.xml</strong>文件项目依赖配置。</p>
<p>###　项目依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">dependencies&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;groupId&gt;mysql&lt;/groupId&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;version&gt;6.0.3&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Java Servlet --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里因为我们使用JNDI技术，数据库的驱动由Tomcat容器提供，所以我们的项目中就不需要再依赖它了，这样一来灵活性也非常高了。</p>
<h3 id="Hibernate配置"><a href="#Hibernate配置" class="headerlink" title="Hibernate配置"></a>Hibernate配置</h3><p>这里列出简单的hibernate配置，新建一个<strong>hibernate.cfg.xml</strong>文件放置到项目<strong>classpath</strong>中，我用的是Idea，也可以放在resources目录中，添加文件内容：</p>
<p>hibernate.cfg.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span><br><span class="line">    "-//Hibernate/Hibernate Configuration DTD//EN"</span><br><span class="line">    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="connection.url"&gt;jdbc:mysql://192.168.1.2:3306/bookshop&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="connection.username"&gt;root&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="connection.password"&gt;lu123&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JNDI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.datasource"</span>&gt;</span>java:comp/env/jdbc/bookshop<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQL5Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"Users.hbm.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到，在使用JNDI之前需要配置一大堆的东西，如:url，数据库连接用户名，密码，驱动类等等。现在使用JNDI之后，只需要提供一个数据源即可，确实比之前方便不少。<br>注意配置文件中映射了一个<strong>Users.hbm.xml</strong>文件，这个文件其实就是用hibernate映射一个JavaBean的配置文件，不过貌似现在都提倡使用注解的方式了。但是还是有可能会遇到需要维护旧的项目，而旧的项目大都是使用xml来进行配置的，所以还是了解下这个比较好。</p>
<p>Users.hbm.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span><br><span class="line">        "http://www.hibernate.org/xsd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.example.hibernate.bean.Users"</span> <span class="attr">table</span>=<span class="string">"users"</span> <span class="attr">catalog</span>=<span class="string">"bookshop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"Id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginName"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"LoginName"</span> <span class="attr">length</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginPwd"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"LoginPwd"</span> <span class="attr">length</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>很简单，就不做过多介绍，根据这个再创建JavaBean类就行，就不贴那个了。</p>
<h3 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h3><p>一般JavaEE web项目都需要一个web.xml文件的，不过貌似随着Spring的潮流，提倡不需要web.xml也可以了。。但还是那句老话，旧的项目正<strong>赚钱</strong>着不可能都给推掉了。</p>
<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span><br><span class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span><br><span class="line">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.hibernate.controller.UserController<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个文件很简单，就只配置一个Servlet，项目配置的东西基本上就都说完了，现在再来看看项目代码结构了。</p>
<h2 id="项目代码结构"><a href="#项目代码结构" class="headerlink" title="项目代码结构"></a>项目代码结构</h2><p><img src="/image/JNDI_project.jpg" alt="Idea"><br>我使用的是IntelliJ IDEA，据说这个是Java中最好的IDE。。<br>项目结构也很简单，能省的都给省了。<br>先看一下<strong>HibernateSessionFactory.java</strong>这个文件，它主要就是在项目中引入Hibernate的配置，并获取到Session，而我们增删改查等操作就都是通过这个Session来控制的。</p>
<p>HibernateSessionFactory.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hibernate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Administrator on 2016/9/25.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        configure = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        sessionFactory = configure.buildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也很简单的操作，就是根据配置文件来获取Session的，而Hibernate的实际操作就是通过这个Session来完成的。<br>我们先从DAO层开始，来看下<strong>BaseHibernateDAO.java</strong>文件</p>
<p>BaseHibernateDAO.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">package com.example.hibernate.dao;</span><br><span class="line"></span><br><span class="line">import com.example.hibernate.HibernateSessionFactory;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.hibernate.Transaction;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2016/9/25.</span><br><span class="line"> */</span><br><span class="line">public abstract class BaseHibernateDAO &#123;</span><br><span class="line"></span><br><span class="line">    protected void add(Object object) &#123;</span><br><span class="line">        Transaction tx = null;</span><br><span class="line"></span><br><span class="line">        // 获取session</span><br><span class="line">        Session session = HibernateSessionFactory.getSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // 开始事务</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">            // 持久化操作</span><br><span class="line">            session.save(object);</span><br><span class="line"></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            if (tx != null) &#123;</span><br><span class="line">                // 回滚事务</span><br><span class="line">                tx.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            // 关闭session</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    protected Object get(Class cla, Serializable id) &#123;</span><br><span class="line">        Object obj = null;</span><br><span class="line"></span><br><span class="line">        Session session = HibernateSessionFactory.getSession();</span><br><span class="line">        try &#123;</span><br><span class="line">            obj = session.get(cla, id);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void delete(Object object) &#123;</span><br><span class="line"></span><br><span class="line">        Transaction tx = null;</span><br><span class="line"></span><br><span class="line">        Session session = HibernateSessionFactory.getSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line">            session.delete(object);</span><br><span class="line"></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            if (tx != null) &#123;</span><br><span class="line">                tx.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    protected void update(Object object) &#123;</span><br><span class="line">        Transaction tx = null;</span><br><span class="line">        Session session = HibernateSessionFactory.getSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line">            session.update(object);</span><br><span class="line"></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            if (tx != null) &#123;</span><br><span class="line">                tx.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里也很简单，毕竟只是为了演示测试使用，真正的项目肯定不应该这样的。<br>再来看看<strong>UserDAO.java</strong>文件，它主要是提供了上层能够操作的接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hibernate.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hibernate.bean.Users;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Created by Administrator on 2016/9/25.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Users users)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Users <span class="title">load</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Users users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UserDAOImpl.java也没什么内容，其实就是我懒。。。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.example.hibernate.dao;</span><br><span class="line"></span><br><span class="line">import com.example.hibernate.bean.Users;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2016/9/25.</span><br><span class="line"> */</span><br><span class="line">public class UserDAOImpl extends BaseHibernateDAO implements UserDAO &#123;</span><br><span class="line">    public void add(Users users) &#123;</span><br><span class="line">        super.add(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void delete(Users users) &#123;</span><br><span class="line">        super.delete(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Users load(Integer id) &#123;</span><br><span class="line">        return (Users) super.get(Users.class, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void update(Users users) &#123;</span><br><span class="line">        super.update(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再来看看关键的Controller，主要就是响应web页面的请求的。</p>
<p>UserController.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.example.hibernate.controller;</span><br><span class="line"></span><br><span class="line">import com.example.hibernate.bean.Users;</span><br><span class="line">import com.example.hibernate.dao.UserDAO;</span><br><span class="line">import com.example.hibernate.dao.UserDAOImpl;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2016/10/2.</span><br><span class="line"> */</span><br><span class="line">public class UserController extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        UserDAO dao = new UserDAOImpl();</span><br><span class="line">        Users load = dao.load(3);</span><br><span class="line"></span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(&quot;get = &quot; + load.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也很简单，相信初学者也都能看懂，当然了我也是一个Web的初学者，之前都是做Android应用开发，现在是做Android系统Framework开发，而未来我打算想做Web后端开发，努力学习ing…</p>
<p>哦，对了。还有最关键的数据库方面还没说。。</p>
<h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><p><img src="/image/bookshop_tb.png" alt="Mysql user data"></p>
<p>使用Navicat for MySQL可以很方便设计数据库表和进行增删改查等操作，挺强大的一个功能是还能从excel表格中导入数据。</p>
<p><img src="/image/bookshop_des.png" alt="mysql user design"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，一个简单Hibernate+JNDI配置就说到这吧。当然，配置的方式有很多种，但是只要适合自己就好了。<br>这里最后再吐槽一句，网上的教程一大堆也太不完整了，东一点西一点的，说一大堆还是不会用。即使是只作为自己的一个笔记，起码也要说清楚一点比较好吧，万一后来自己再来翻的时候都看不懂，那就笑了。<br>而作为一个教程类，起码得要能run跑起来吧？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始使用JNDI，网上也查了不少资料，磕磕盼盼鼓捣了大半天才成功，在此记录一下。&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;首先还是再啰嗦两句，介绍一下JNDI技术。
    
    </summary>
    
      <category term="Web" scheme="https://lusyoe.github.io/categories/Web/"/>
    
    
      <category term="Hibernate" scheme="https://lusyoe.github.io/tags/Hibernate/"/>
    
      <category term="JNDI" scheme="https://lusyoe.github.io/tags/JNDI/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins远程部署war包到tomcat</title>
    <link href="https://lusyoe.github.io/2016/09/27/Jenkins%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2war%E5%8C%85%E5%88%B0tomcat/"/>
    <id>https://lusyoe.github.io/2016/09/27/Jenkins远程部署war包到tomcat/</id>
    <published>2016-09-27T13:46:33.000Z</published>
    <updated>2016-09-27T14:47:44.875Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于这个的文章也是数不胜数了，但是稍不注意还是会掉坑里了，好不容易配置成功在这里记录一下。<br>关于怎么搭建Jenkins自动构建之前已经写过，这里就再补充一下自动远程部署的情况。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在开始之前，服务器上需要有安装好环境，如：JDK，Tomcat等<br>配置好环境变量同时，在Jenkins和Gitlab上创建好项目。</p>
<h1 id="项目文件配置"><a href="#项目文件配置" class="headerlink" title="项目文件配置"></a>项目文件配置</h1><p>来依次看一下关于项目的文件配置，包括Maven的配置等。</p>
<h3 id="pom-xml配置"><a href="#pom-xml配置" class="headerlink" title="pom.xml配置"></a>pom.xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">warPackageName</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">warPackageName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tomcat.deploy.server</span>&gt;</span>tomcat8<span class="tag">&lt;/<span class="name">tomcat.deploy.server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tomcat.deploy.serverUrl</span>&gt;</span>http://192.168.1.2:8088/manager/text<span class="tag">&lt;/<span class="name">tomcat.deploy.serverUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">server</span>&gt;</span>$&#123;tomcat.deploy.server&#125;<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>$&#123;tomcat.deploy.serverUrl&#125;<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/$&#123;warPackageName&#125;<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>我这里tomcat版本使用的8，如果使用的是tomcat6.x的话，serverUrl需要改为<code>http://192.168.1.2:8080/manager</code>。<br>在这里<code>&lt;tomcat.deploy.server&gt;tomcat8&lt;/tomcat.deploy.server&gt;</code>，其中tomcat8是需要在Maven的<strong>.settings.xml</strong>文件中配置的。</p>
<h3 id="Maven-settings配置"><a href="#Maven-settings配置" class="headerlink" title="Maven settings配置"></a>Maven settings配置</h3><p>~/.m2/.settings.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span><br><span class="line">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>lhy123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>tomcat8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>deployer<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>internal nexus repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.2:8081/repository/maven-central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里主要是看server中的tomcat8配置，需要tomcat的用户名和密码。至于其他的是关于nexus的配置，以后有机会再写一篇详细说明Nexus的吧。<br>tomcat的用户名和密码就需要我们到服务器上去配置了。</p>
<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>服务器上主要是<strong>tomcat用户配置</strong>和<strong>Maven settings配置</strong>。<br>是的，本地配置那个是方便在本地就可以直接部署到服务器，但是如果是用Jenkins来帮我们自动的部署的话就需要在服务器上也配置一下Maven Settings了，否则在构建好后是无法进行远程部署的，因为不知道tomcat的用户名和密码。<br>在这里我们直接复制本地的.settings.xml文件到服务器就好，也有个地方需要注意了。<br><strong>.settings.xml</strong>这个文件不是随便放的，需要放到启动jenkins的用户的那个home目录下面的.m2/目录中。<br>因为我是直接从<a href="https://jenkins.io/" target="_blank" rel="external">Jenkins官网</a>下载了war包，然后丢到tomcat中运行的。<br>所以这里我需要将<strong>.settings.xml</strong>文件放到<code>/usr/share/tomcat8/.m2/</code>中。<br>需要注意的是文件权限问题，我是为了偷懒直接用系统<code># apt-get install tomcat8</code>安装的，系统会自动创建tomcat8用户。<br>所以还需要额外执行一条命令：<code># chown tomcat8:tomcat8 .settings.xml</code>即可。<br>如果是自己从<a href="http://tomcat.apache.org/" target="_blank" rel="external">apache tomcat官网</a>下载的压缩包的话，就看你启动tomcat服务用的哪个系统用户了，就把<strong>.settings.xml</strong>文件丢到那个用户的<code>$HOME/.m2/</code>下即可。</p>
<h3 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h3><p>先在tomcat用户配置文件中添加一个用户，并给予<strong>manager-script</strong>权限就行。<br>在我这里是编辑<code>/etc/tomcat8/tomcat-users.xml</code>文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin-gui"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"admin-gui,manager-gui"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"deployer"</span> <span class="attr">password</span>=<span class="string">"dev"</span> <span class="attr">roles</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>主要看deployer这个用户就行了。</p>
<h3 id="Jenkins构建配置"><a href="#Jenkins构建配置" class="headerlink" title="Jenkins构建配置"></a>Jenkins构建配置</h3><p>好了，最后再说一下，在Jenkins中执行的构建命令<br><img src="/image/maven-build.png" alt="maven-build"><br>这里需要注意,执行的是<strong>mvn tomcat:redeploy</strong>。<br>网上很多教程说的是<strong>mvn tomcat7:redeploy</strong>，我这边死活不行，总是报错。<br><code>No plugin found for prefix &#39;tomcat7&#39; in the current project.</code><br>暂时不知道是什么原因，先不管了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做开发的就是一路趟坑啊，尤其是web方面。感觉就这么一点小小的东西都折腾了好一番，真是路漫漫兮其修远矣。但是为了前途咱还是得一路顶上去呢，吾必将上下而求索~</p>
<p>致还在年轻奋斗的我们。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上关于这个的文章也是数不胜数了，但是稍不注意还是会掉坑里了，好不容易配置成功在这里记录一下。&lt;br&gt;关于怎么搭建Jenkins自动构建之前已经写过，这里就再补充一下自动远程部署的情况。&lt;/p&gt;
&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;header
    
    </summary>
    
      <category term="CI持续集成" scheme="https://lusyoe.github.io/categories/CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="CI持续集成" scheme="https://lusyoe.github.io/tags/CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA使用JpaRepository自动装配报No qualifying bean of type错误</title>
    <link href="https://lusyoe.github.io/2016/09/22/Spring-Data-JPA%E4%BD%BF%E7%94%A8JpaRepository%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%8A%A5No-qualifying-bean-of-type%E9%94%99%E8%AF%AF/"/>
    <id>https://lusyoe.github.io/2016/09/22/Spring-Data-JPA使用JpaRepository自动装配报No-qualifying-bean-of-type错误/</id>
    <published>2016-09-22T13:50:31.000Z</published>
    <updated>2016-09-22T14:05:44.354Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个问题折腾蛮久的，在这里记录一下。<br>毕竟是才刚开始使用Jpa这个技术，总是会遇到各种配置问题。<br>使用Spring Data Jpa非常的方便，一些简单的操作基本上都不用写具体的实现，<br>直接写一个接口继承JpaRepository就行了，注意需要带有一个泛型。k = 表映射的实体类，value = 表的Id类型。</p>
<p>在使用的时候直接自动装配就好。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> xxxRepository repository;</span><br></pre></td></tr></table></figure>
<p>然后就可以使用一些常用的数据库操作，如：findxxx、delete、save。<br>不过默认没有<code>update</code>方法，如果需要的话，就要在接口中再添加。</p>
<p>好了，说下我遇到的那个问题。<br><code>Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.rest.repository.UserRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}</code><br>写个Demo自动装配的时候，测试报这个错误。<br>检查一下spring配置文件，才发现少了声明repository所在包位置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表示JPA Repository所在的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.example.rest.repository"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加以上配置即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇到一个问题折腾蛮久的，在这里记录一下。&lt;br&gt;毕竟是才刚开始使用Jpa这个技术，总是会遇到各种配置问题。&lt;br&gt;使用Spring Data Jpa非常的方便，一些简单的操作基本上都不用写具体的实现，&lt;br&gt;直接写一个接口继承JpaRepository就行了，注意需要带
    
    </summary>
    
      <category term="Spring" scheme="https://lusyoe.github.io/categories/Spring/"/>
    
    
      <category term="Web" scheme="https://lusyoe.github.io/tags/Web/"/>
    
      <category term="Spring" scheme="https://lusyoe.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA配置出现Not a managed type错误</title>
    <link href="https://lusyoe.github.io/2016/09/20/Spring-Data-JPA%E9%85%8D%E7%BD%AE%E5%87%BA%E7%8E%B0Not-a-managed-type%E9%94%99%E8%AF%AF/"/>
    <id>https://lusyoe.github.io/2016/09/20/Spring-Data-JPA配置出现Not-a-managed-type错误/</id>
    <published>2016-09-20T11:25:46.000Z</published>
    <updated>2016-09-20T11:35:23.575Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Spring框架，配置数据库连接的时候出现这个错误。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: Not a managed type: <span class="class"><span class="keyword">class</span> ...</span></span><br></pre></td></tr></table></figure></p>
<p>才刚学不久，被这个问题折腾了有一会，后来检查的时候无意中发现在<strong>persistence.xml</strong>文件漏了东西啦。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JPA的提供者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span>&gt;</span>com.example.usermanage.model.User<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>之前在上面的配置的时候，少添加了<code>&lt;class&gt;com.example.usermanage.model.User&lt;/class&gt;</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习Spring框架，配置数据库连接的时候出现这个错误。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre
    
    </summary>
    
      <category term="Spring" scheme="https://lusyoe.github.io/categories/Spring/"/>
    
    
      <category term="Web" scheme="https://lusyoe.github.io/tags/Web/"/>
    
      <category term="Spring" scheme="https://lusyoe.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Debian 8桌面安装Nvidia GTX960显卡驱动</title>
    <link href="https://lusyoe.github.io/2016/09/04/Debian-8%E6%A1%8C%E9%9D%A2%E5%AE%89%E8%A3%85Nvidia-GTX960%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    <id>https://lusyoe.github.io/2016/09/04/Debian-8桌面安装Nvidia-GTX960显卡驱动/</id>
    <published>2016-09-04T12:55:52.000Z</published>
    <updated>2016-09-04T13:45:28.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>还是上次那个朋友，帮他把组装电脑装好Debian系统后，首先是出现USB无线网卡驱动问题，现在又是出现显卡驱动问题。<br>因为没有安装显卡闭源驱动，每次开机都会出现提示<code>没有使用硬件加速，不推荐使用</code>之类的信息，整个系统界面也显示的很模糊。<br>这是因为默认使用的是内核中自带的开源驱动，效果肯定很差了。没办法了，只能叫我来帮他安装驱动了。</p>
<a id="more"></a>
<h1 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h1><p>好歹也算是一名Linux的老鸟了，肯定不能像一个新手一样去百度搜那些杂乱、过时的信息。<br>刚开始我也经常这样做，结果搞得系统总是出问题，经过了多次重装系统的惨烈经历后，慢慢就总结出来经验了。<br>像这种东西，必须要先去查看<strong>官方wiki</strong>。如果官方还没有支持的话，再去<strong>google</strong>搜索第三方是如何安装的。<br>不过这次很幸运，目前Debian官方已经支持Nvidia GTX960显卡驱动安装了，不过如果系统是Debian稳定版的话就必须要添加backports源了。</p>
<h3 id="查看显卡型号"><a href="#查看显卡型号" class="headerlink" title="查看显卡型号"></a>查看显卡型号</h3><p><code># lspci -nn |grep VGA</code></p>
<p>以下命令确保都在root用户下运行。</p>
<h3 id="添加backports源"><a href="#添加backports源" class="headerlink" title="添加backports源"></a>添加backports源</h3><p><code># echo &quot;deb http://httpredir.debian.org/debian jessie-backports main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list</code><br>更新源<br><code># apt-get update</code></p>
<h3 id="安装Linux-headers"><a href="#安装Linux-headers" class="headerlink" title="安装Linux headers"></a>安装Linux headers</h3><p>因为驱动会依赖一些Linux headers库。<br><code># apt-get install linux-headers-$(uname -r|sed &#39;s,[^-]*-[^-]*-,,&#39;)</code></p>
<h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><p><code># apt-get install -t jessie-backports nvidia-driver</code><br>安装的过程中可能会提示与当前的正在使用的开源驱动nouveau冲突，不用理会确定即可。<br>安装程序会将开源驱动默认添加到<strong>blacklist</strong>中，安装成功后，需要重启一下系统就好啦。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>驱动安装好后，重启进入系统，再也没有那个<strong>未使用硬件加速</strong>提示了，整个界面也显示的非常清晰。<br>有和没有驱动区别还是相当大的，之前都听别人说Linux中显卡驱动怎么怎么的坑。虽然我之前也没折腾过这个，<br>一是：我的笔记本比较老式了i3 u，只使用cpu中的集显，也没遇到过显卡驱动方面的坑。<br>二是：自从买了E5的服务器装好Debian后，我就把笔记本换回了win7，服务器当然不需要图形界面和显卡啦，而Windows的驱动安装更是简单，不多说了。</p>
<p>这次帮朋友安装，才知道了，Linux现在在桌面方面长进还是非常大的。<br>最后是瑾记一句话：<br>千万不要再随意帮别人装系统。<br>千万不要再随意帮别人装系统。<br>千万不要再随意帮别人装系统。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote>
<p>Debian Nividia显卡驱动wiki： <a href="https://wiki.debian.org/NvidiaGraphicsDrivers" target="_blank" rel="external">https://wiki.debian.org/NvidiaGraphicsDrivers</a><br>最新驱动版本支持的型号： <a href="http://us.download.nvidia.com/XFree86/Linux-x86_64/352.79/README/supportedchips.html" target="_blank" rel="external">http://us.download.nvidia.com/XFree86/Linux-x86_64/352.79/README/supportedchips.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;还是上次那个朋友，帮他把组装电脑装好Debian系统后，首先是出现USB无线网卡驱动问题，现在又是出现显卡驱动问题。&lt;br&gt;因为没有安装显卡闭源驱动，每次开机都会出现提示&lt;code&gt;没有使用硬件加速，不推荐使用&lt;/code&gt;之类的信息，整个系统界面也显示的很模糊。&lt;br&gt;这是因为默认使用的是内核中自带的开源驱动，效果肯定很差了。没办法了，只能叫我来帮他安装驱动了。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://lusyoe.github.io/categories/Linux/"/>
    
    
      <category term="Linux驱动" scheme="https://lusyoe.github.io/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="显卡驱动" scheme="https://lusyoe.github.io/tags/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之视图实战篇</title>
    <link href="https://lusyoe.github.io/2016/09/03/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%AE%9E%E6%88%98%E7%AF%87/"/>
    <id>https://lusyoe.github.io/2016/09/03/MySQL基础之视图实战篇/</id>
    <published>2016-09-03T02:05:49.000Z</published>
    <updated>2016-09-23T15:37:51.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h1><p>基本语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>][ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> |TEMPTABLE&#125;]</span><br><span class="line">    <span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line">    <span class="keyword">AS</span> SELECT_statement</span><br><span class="line">    [<span class="keyword">WITH</span>[<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure></p>
<p>其中，<strong>CREATE</strong> 表示创建新的视图，<strong>REPLACE</strong>表示替换已经创建的视图;<strong>ALGORITHM</strong>表示视图选择的算法；<br><strong>view_name</strong> 为视图的名称，<strong>column_list</strong>为属性列；<strong>SELECT_statement</strong>表示<code>SELECT</code>语句;<br><strong>WITH [CASCADED | LOCAL] CHECK OPTION</strong>参数表示视图在更新时保证在视图的权限范围之内。</p>
<h3 id="在单表上创建视图"><a href="#在单表上创建视图" class="headerlink" title="在单表上创建视图"></a>在单表上创建视图</h3><p>视图是基于表之上的虚拟表，所以必须要先有表。</p>
<ul>
<li><p>创建表</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t(</span><br><span class="line">    <span class="keyword">id</span>       <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    quantity <span class="built_in">INT</span>,</span><br><span class="line">    price    <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建视图</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_t <span class="keyword">AS</span> <span class="keyword">SELECT</span> quantity, price, quantity*price <span class="keyword">AS</span> total <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="在多表上创建视图"><a href="#在多表上创建视图" class="headerlink" title="在多表上创建视图"></a>在多表上创建视图</h3><ul>
<li>创建表<br>表1:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">  <span class="keyword">id</span>     <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="built_in">number</span> <span class="built_in">INT</span>,</span><br><span class="line">  <span class="keyword">name</span>   <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>表2:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stutent_info(</span><br><span class="line">  <span class="keyword">id</span>      <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">class</span>   <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  address <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>创建视图<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> stu_glass(<span class="keyword">id</span>, <span class="keyword">name</span>, glass) <span class="keyword">AS</span> <span class="keyword">SELECT</span> student.<span class="keyword">id</span>, student.<span class="keyword">name</span>, stutent_info.<span class="keyword">class</span></span><br><span class="line"><span class="keyword">FROM</span> student, student_info <span class="keyword">WHERE</span> student.<span class="keyword">id</span>=student_info.<span class="keyword">id</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><p>视图创建好了后，可以查看视图的一些信息，如以下几种:</p>
<ul>
<li><p>查看视图描述<br>与表类似<br><code>DESC stu_glass;</code></p>
</li>
<li><p>查看视图定义<br><code>SHOW CREATE VIEW stu_glass;</code></p>
</li>
</ul>
<h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><p>当数据库中的基本表某些字段发生变化的时候，可以通过修改视图来保持与基本表的一致性。<br>在Mysql中可以通过<code>CREATE OR REPLACE VIEW</code>语句和<code>ALTER</code>语句来修改视图。</p>
<ul>
<li><strong>CREATE OR REPLACE VIEW</strong>语句<br>使用改语句时，如果视图已经存在则对视图进行修改，当视图不存在时，就创建视图。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> view_t <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>可通过<code>DESC view_t</code>语句来查看修改后的视图结构。</p>
<ul>
<li><strong>ALTER</strong>语句<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> view_t <span class="keyword">AS</span> <span class="keyword">SELECT</span> quantity <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2><p>更新视图是指通过视图来插入、更新、删除表中的数据，因为视图是一个虚拟表，其中没有数据。<br>通过视图更新的时候都是转到基本表上进行更新的，如果对视图增加或者删除记录，实际上是对其基本表增加或者删除记录。</p>
<ul>
<li><p><strong>UPDATE</strong>语句</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> view_t <span class="keyword">SET</span> quantity=<span class="number">5</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>INSERT</strong>语句<br>在基本表中插入语句，其关联视图也会进行相应改变的。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> view_t;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>DELETE</strong>语句<br>在视图中删除一行数据，其基本表也会进行相应的删除。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> view_t <span class="keyword">WHERE</span> price=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><p>当视图不再需要时，可以将其删除，删除一个或多个视图可以使用<code>DROP VIEW</code>语句。语法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>]</span><br><span class="line">    view_name [, view_name]...</span><br><span class="line">    [RESTRICT | <span class="keyword">CASCADE</span>]</span><br></pre></td></tr></table></figure></p>
<p>例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> stu_glass;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;创建视图&quot;&gt;&lt;a href=&quot;#创建视图&quot; class=&quot;headerlink&quot; title=&quot;创建视图&quot;&gt;&lt;/a&gt;创建视图&lt;/h1&gt;&lt;p&gt;基本语法：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
      <category term="MySQL" scheme="https://lusyoe.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lusyoe.github.io/tags/MySQL/"/>
    
      <category term="视图" scheme="https://lusyoe.github.io/tags/%E8%A7%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Debian桌面编译安装Tenda U1 USB无线网卡驱动</title>
    <link href="https://lusyoe.github.io/2016/09/02/Debian%E6%A1%8C%E9%9D%A2%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85Tenda-U1-USB%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    <id>https://lusyoe.github.io/2016/09/02/Debian桌面编译安装Tenda-U1-USB无线网卡驱动/</id>
    <published>2016-09-02T15:14:01.000Z</published>
    <updated>2016-09-04T12:56:15.610Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h1><p>朋友新组装了一台PC,应他的要求帮他装了一个Debian Linux系统。<br>由于没办法直接用网线连着PC,他就买了一个USB的无线网卡连上无线路由就好。<br>结果Linux系统由于驱动问题，不识别那个网卡。<br>没办法了，系统是我帮装的，只好叫我来给他弄这个了。一番折腾过后顺利安装成功了，在这里记录一下。</p>
<h1 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h1><ul>
<li>从官方网站下载适用于Linux的驱动<br><code># wget http://down.tenda.com.cn/uploadfile/2016/U1_linux.zip</code></li>
</ul>
<a id="more"></a>
<ul>
<li><p>编译</p>
<ul>
<li>解压zip包<br><code># unzip U1_linux.zip</code></li>
<li>进入解压后的目录<br><code># cd RTL8192EU_linux_v4.3.15_14701_BTCOEX20150615-41.20150715</code></li>
<li>执行自动编译脚本<br><code># sh install.sh</code></li>
</ul>
</li>
<li><p>解决依赖问题<br>如果编译过程中出现类似<code>/lib/modules/3.16.0-4-amd64/build No such file or directory</code> 错误。<br>那么需要安装额外的编译依赖库。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt-get install linux-headers-`uname -r`</span><br></pre></td></tr></table></figure>
<p>然后继续编译即可<br><code># sh install.sh</code></p>
<p>如果不是使用root用户编译的话,中间需要输入几次root密码。<br>最后出现<br><code>The Setup Script is completed !</code><br>就表示编译安装成功了，这时候点开桌面的网络连接工具应该就可以扫描到热点了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>看起来挺简单的，但是对于新手来说还是很不容易的。<br>腾达的官方文档倒是挺全的，但是全英文不说，信息太大而全了。一般新手很难找到有用的信息。<br>就比如说这次编译依赖的问题，我就没有从文档中找到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前序&quot;&gt;&lt;a href=&quot;#前序&quot; class=&quot;headerlink&quot; title=&quot;前序&quot;&gt;&lt;/a&gt;前序&lt;/h1&gt;&lt;p&gt;朋友新组装了一台PC,应他的要求帮他装了一个Debian Linux系统。&lt;br&gt;由于没办法直接用网线连着PC,他就买了一个USB的无线网卡连上无线路由就好。&lt;br&gt;结果Linux系统由于驱动问题，不识别那个网卡。&lt;br&gt;没办法了，系统是我帮装的，只好叫我来给他弄这个了。一番折腾过后顺利安装成功了，在这里记录一下。&lt;/p&gt;
&lt;h1 id=&quot;驱动安装&quot;&gt;&lt;a href=&quot;#驱动安装&quot; class=&quot;headerlink&quot; title=&quot;驱动安装&quot;&gt;&lt;/a&gt;驱动安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;从官方网站下载适用于Linux的驱动&lt;br&gt;&lt;code&gt;# wget http://down.tenda.com.cn/uploadfile/2016/U1_linux.zip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://lusyoe.github.io/categories/Linux/"/>
    
    
      <category term="USB" scheme="https://lusyoe.github.io/tags/USB/"/>
    
      <category term="Linux驱动" scheme="https://lusyoe.github.io/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之视图理论篇</title>
    <link href="https://lusyoe.github.io/2016/08/29/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%A7%86%E5%9B%BE%E7%90%86%E8%AE%BA%E7%AF%87/"/>
    <id>https://lusyoe.github.io/2016/08/29/MySQL基础之视图理论篇/</id>
    <published>2016-08-29T15:15:05.000Z</published>
    <updated>2016-09-03T02:08:29.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视图概述"><a href="#视图概述" class="headerlink" title="视图概述"></a>视图概述</h1><p>视图是一个或者多个表中导出的，视图的行为与表非常的相似，但视图是一个<strong>虚拟表</strong>。<br>在视图中用户可以使用<code>SELECT</code>语句查询数据，以及使用<code>INSERT、UPDATE、DELETE</code>修改记录。<br>从<strong>MySQL 5.0</strong>开始可以使用视图，视图可以使用户操作方便，而且可以保障数据库系统的安全。</p>
<h1 id="视图的含义"><a href="#视图的含义" class="headerlink" title="视图的含义"></a>视图的含义</h1><p>视图是一个<strong>虚拟表</strong>，是从数据库中一个或多个表中导出来的表。视图还可以从已经存在的视图的基础上定义。<br>视图一经定义便存储在数据库中，与其相对应的数据并没有像表那样在数据库中再存储一份，通过视图看到的数据只是存放在基本表中的数据。对视图的操作与对表的操作一样，可以对其进行查询、修改和删除。<br>当对通过视图看到的数据进行修改时，相应的基本表数据也要发生变化；同时，若基本表的数据发生变化，则这种变化也可以自动的反映到视图中。</p>
<h1 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h1><p>与直接从数据表中读取相比，视图有以下优点：</p>
<h4 id="简单化"><a href="#简单化" class="headerlink" title="简单化"></a>简单化</h4><p><strong>看到的就是需要的</strong>。视图不仅可以简化用户对数据的理解，也可以简化他们的操作。<br>那些被经常使用的查询可以被定义为视图，从而使得用户不必为以后的操作每次指定全部的条件。</p>
<h4 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h4><p><strong>通过视图用户只能查询和修改他们所能见到的数据</strong>。<br>数据库中的其他数据则既看不见也取不到。数据库授权命令可以使每个用户对数据库的检索限制到特定的数据库对象上，但不能授权到数据库特定行和特定的列上。<br>通过视图，用户可以被限制在数据的不同子集上：</p>
<ul>
<li>使用权限可被限制在基表的行的子集上;</li>
<li>使用权限可被限制在基表的列的子集上;</li>
<li>使用权限可被限制在基表的行和列的子集上;</li>
<li>使用权限可被限制在多个基表的连接所限定的行上;</li>
<li>使用权限可被限制在基表中的数据的统计汇总上;</li>
<li>使用权限可被限制在另一视图的一个子集上，或是一些视图和基表表合并后的子集上。</li>
</ul>
<h4 id="逻辑数据独立性"><a href="#逻辑数据独立性" class="headerlink" title="逻辑数据独立性"></a>逻辑数据独立性</h4><p>视图可帮助用户屏蔽真实表结构变化带来的影响。视图就相当于一个<strong>抽象层</strong>，用户面向的是抽象后的而不是底层表的细节。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;视图概述&quot;&gt;&lt;a href=&quot;#视图概述&quot; class=&quot;headerlink&quot; title=&quot;视图概述&quot;&gt;&lt;/a&gt;视图概述&lt;/h1&gt;&lt;p&gt;视图是一个或者多个表中导出的，视图的行为与表非常的相似，但视图是一个&lt;strong&gt;虚拟表&lt;/strong&gt;。&lt;br&gt;在视图
    
    </summary>
    
      <category term="MySQL" scheme="https://lusyoe.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lusyoe.github.io/tags/MySQL/"/>
    
      <category term="视图" scheme="https://lusyoe.github.io/tags/%E8%A7%86%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab CI Multi Runner搭建CI持续集成环境</title>
    <link href="https://lusyoe.github.io/2016/08/29/Gitlab-CI-Multi-Runner%E6%90%AD%E5%BB%BACI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/"/>
    <id>https://lusyoe.github.io/2016/08/29/Gitlab-CI-Multi-Runner搭建CI持续集成环境/</id>
    <published>2016-08-29T12:32:56.000Z</published>
    <updated>2016-08-30T12:04:00.216Z</updated>
    
    <content type="html"><![CDATA[<p>GitLab不仅仅只是代码托管的工具，它还集成了CI的功能，通过Gitlab CI Multi Runner工具可以更方便的搭建持续集成环境。<br>在安装好GitLab之后还需要再安装一个叫gitlab-ci-multi-runner的工具。<br>PS: 当然了肯定没有Jenkins那么强大，毕竟可用插件太多了。</p>
<h1 id="安装gitlab-ci-multi-runner"><a href="#安装gitlab-ci-multi-runner" class="headerlink" title="安装gitlab-ci-multi-runner"></a>安装gitlab-ci-multi-runner</h1><a id="more"></a>
<p><a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner#installation/" target="_blank" rel="external">官方多种安装方式</a><br>由于众所周知(墙)的原因，还是推荐<a href="https://mirrors.tuna.tsinghua.edu.cn/help/gitlab-ci-multi-runner" target="_blank" rel="external">Gitlab CI Multi Runner 清华镜像</a></p>
<h1 id="gitlab-runner命令介绍"><a href="#gitlab-runner命令介绍" class="headerlink" title="gitlab-runner命令介绍"></a>gitlab-runner命令介绍</h1><h3 id="服务状态"><a href="#服务状态" class="headerlink" title="服务状态"></a>服务状态</h3><p>安装好runner之后就可以使用gitlab-runner命令了，可通过<code># gitlab-runner help</code>查看命令帮助，<br>更多命令详情可以查阅<a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner/blob/master/docs/commands/README.md" target="_blank" rel="external">官方文档</a><br>好了，让我们来先查看一下服务运行的状态。<br><code># gitlab-runner status</code><br>输出以下内容，说明服务运行正常了。<br><code>gitlab-runner: Service is running!</code></p>
<p>还有也可以通过以下命令查看，不过我更喜欢短一点的命令，后面都只使用<strong>gitlab-runner</strong>了。<br><code># gitlab-ci-multi-runner status</code></p>
<h3 id="注册一个runner"><a href="#注册一个runner" class="headerlink" title="注册一个runner"></a>注册一个runner</h3><p>注册一个runner可以使用交互式和非交互式两种方式，默认使用交互式的。<br>输入以下命令就可以开始交互式注册了，在这之前请确保<strong>Gitlab</strong>上面已经新建有项目了。<br><code># gitlab-runner register</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Running in system-mode.</span><br><span class="line"></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/ci):</span><br><span class="line">http://192.168.1.2/ci   // 在这里输入gitlab安装的服务器ip/ci 即可</span><br><span class="line">Please enter the gitlab-ci token for this runner:</span><br><span class="line">eaYyokc57xxZbzAsoshT    // 这里的token可通过Gitlab上的项目Runners选项查看，在下面贴一张截图</span><br><span class="line">Please enter the gitlab-ci description for this runner:</span><br><span class="line">[E5]: spring-demo       // 这里填写一个描述信息，不太重要，看着填吧</span><br><span class="line">Please enter the gitlab-ci tags for this runner (comma separated):</span><br><span class="line">demo                    // 在这里填写tag信息，多个tag可通过逗号,分割。</span><br><span class="line">Registering runner... succeeded                     runner=eaYyokc5</span><br><span class="line">Please enter the executor: docker, docker-ssh, parallels, shell, ssh, virtualbox, docker+machine, docker-ssh+machine:</span><br><span class="line">shell                   // 在这里需要输入runner的执行方式，因为我的Gitlab和runner是安装在同一台服务器上的，直接输入shell</span><br><span class="line">Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</span><br><span class="line">// 出现这样信息表示服务端的配置就已经成功结束了，如果需要使用到自动构建，还需要再添加一个配置文件，下面说说这个。</span><br></pre></td></tr></table></figure>
<p><img src="/image/runner.png" alt="runner"></p>
<h3 id="查看runner配置信息"><a href="#查看runner配置信息" class="headerlink" title="查看runner配置信息"></a>查看runner配置信息</h3><p>可通过以下命令进行查看<br><code># gitlab-runner list</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Listing configured runners                          ConfigFile=/etc/gitlab-runner/config.toml</span><br><span class="line">spring-demo                                         Executor=shell Token=387ed6c05fef248d2183f9f45b9cda URL=http://192.168.1.2/ci</span><br></pre></td></tr></table></figure></p>
<p>也可以直接打开配置文件进行查看<br><code># vim /etc/gitlab-runner/config.toml</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">concurrent = 1</span><br><span class="line">check_interval = 0</span><br><span class="line"></span><br><span class="line">[[runners]]</span><br><span class="line">  name = "spring-demo"</span><br><span class="line">  url = "http://192.168.1.2/ci"</span><br><span class="line">  token = "387ed6c05fef248d2183f9f45b9cda"</span><br><span class="line">  executor = "shell"</span><br><span class="line">  [runners.ssh]</span><br><span class="line">  [runners.docker]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = ""</span><br><span class="line">    privileged = false</span><br><span class="line">    disable_cache = false</span><br><span class="line">  [runners.parallels]</span><br><span class="line">    base_name = ""</span><br><span class="line">    disable_snapshots = false</span><br><span class="line">  [runners.virtualbox]</span><br><span class="line">    base_name = ""</span><br><span class="line">    disable_snapshots = false</span><br><span class="line">  [runners.cache]</span><br></pre></td></tr></table></figure></p>
<h3 id="删除注册信息"><a href="#删除注册信息" class="headerlink" title="删除注册信息"></a>删除注册信息</h3><p>如果发现register信息填写错误，或者不再使用了。可通过以下命令进行删除。</p>
<ul>
<li><p>首先查看已注册过的信息<br><code># gitlab-runner list</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Listing configured runners                          ConfigFile=/etc/gitlab-runner/config.toml</span><br><span class="line">spring-demo                                         Executor=shell Token=387ed6c05fef248d2183f9f45b9cda URL=http://192.168.1.2/ci</span><br></pre></td></tr></table></figure>
</li>
<li><p>开始删除<br><code># gitlab-runner unregister --url http://192.168.1.2/ci --token 387ed6c05fef248d2183f9f45b9cda</code><br>其中<strong>–url</strong>参数可查看上面的URL=后面的值填写，<strong>–token</strong>参数就是上面的Token=后面的值，复制粘贴即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Running in system-mode.</span><br><span class="line"></span><br><span class="line">Deleting runner... succeeded                        runner=387ed6c0</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>出现上面信息表示删除成功了。<br><strong>注意：</strong>这个操作是不可逆的，为了防止出错可以先备份一下<code>/etc/gitlab-runner/config.toml</code>配置文件</p>
<h2 id="项目自动化构建配置"><a href="#项目自动化构建配置" class="headerlink" title="项目自动化构建配置"></a>项目自动化构建配置</h2><p>配置好了runner，想要开始自动构建还需要在项目根目录添加一个<strong>.gitlab-ci.yaml</strong>文件。<br>关于<strong>.gitlab-ci.yaml</strong>文件的配置说明可参考<a href="http://docs.gitlab.com/ce/ci/yaml/README.html" target="_blank" rel="external">官方文档</a>。<br>下面贴一下我做测试Demo时使用的，不要笑，很简单只做演示用的。。<br>.gitlab-ci.yaml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">  - deploy</span><br><span class="line">job1:</span><br><span class="line">  stage: build</span><br><span class="line">  script: &quot;mvn package&quot;</span><br><span class="line">job2:</span><br><span class="line">  stage: deploy</span><br><span class="line">  script: &quot;mvn tomcat:redeploy -Dmaven.test.skip=truey -e -X&quot;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里关于CI持续集成的差不多就说那么多了，当然了还有很多都没说到，这就要看实际的项目需求进行相应的配置了。<br>总的来说呢，gitlab-runner虽然跟Gitlab集成的比较好，但是功能方面还是有点不如老牌的Jenkins。<br>不过它对Docker倒是支持的蛮好的，说起来我接触Docker也是挺早的了，它2013年开源，我2014年就开始接触了，并且2015年也在公司服务器上实际部署了，后面有时间再写点关于Docker的吧。不过跳槽后就用的少了，但愿别都忘了好:)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitLab不仅仅只是代码托管的工具，它还集成了CI的功能，通过Gitlab CI Multi Runner工具可以更方便的搭建持续集成环境。&lt;br&gt;在安装好GitLab之后还需要再安装一个叫gitlab-ci-multi-runner的工具。&lt;br&gt;PS: 当然了肯定没有Jenkins那么强大，毕竟可用插件太多了。&lt;/p&gt;
&lt;h1 id=&quot;安装gitlab-ci-multi-runner&quot;&gt;&lt;a href=&quot;#安装gitlab-ci-multi-runner&quot; class=&quot;headerlink&quot; title=&quot;安装gitlab-ci-multi-runner&quot;&gt;&lt;/a&gt;安装gitlab-ci-multi-runner&lt;/h1&gt;
    
    </summary>
    
      <category term="CI持续集成" scheme="https://lusyoe.github.io/categories/CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="CI持续集成" scheme="https://lusyoe.github.io/tags/CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+Gitlab搭建CI持续集成架构</title>
    <link href="https://lusyoe.github.io/2016/08/28/Jenkins-Gitlab%E6%90%AD%E5%BB%BACI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%9E%B6%E6%9E%84/"/>
    <id>https://lusyoe.github.io/2016/08/28/Jenkins-Gitlab搭建CI持续集成架构/</id>
    <published>2016-08-28T12:54:20.000Z</published>
    <updated>2016-08-29T15:09:29.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="首先安装Jenkins和Gitlab"><a href="#首先安装Jenkins和Gitlab" class="headerlink" title="首先安装Jenkins和Gitlab"></a>首先安装Jenkins和Gitlab</h1><p>很简单就不多说了，贴个地址<br><a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins" target="_blank" rel="external">Installing Jenkins</a><br><a href="https://about.gitlab.com/downloads" target="_blank" rel="external">Install a GitLab CE</a><br><a id="more"></a><br>需要注意的是，在中国大陆由于墙的问题，Gitlab下载非常的慢，有可能导致下载失败了。。<br>在这里推荐一下清华大学镜像源，在国内速度杠杠的。<br><a href="https://mirrors.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="external">Gitlab Community Edition 镜像使用帮助</a><br>有兴趣的可以看看它们的<a href="https://mirrors.tuna.tsinghua.edu.cn" target="_blank" rel="external">镜像首页</a>，目前支持的镜像挺多的，而且还在不断的增加呢。</p>
<h1 id="安装Jenkins插件"><a href="#安装Jenkins插件" class="headerlink" title="安装Jenkins插件"></a>安装Jenkins插件</h1><p>做持续集成，Jenkins默认安装后还需要再安装一些插件。<br>安装插件很简单，通过浏览器进入安装好Jenkins的服务器首页——&gt;点击系统管理——&gt;管理插件——&gt;可选插件<br>然后过滤查找以下插件，勾选安装即可</p>
<ul>
<li>Git client plugin</li>
<li>Git plugin</li>
<li>Gitlab Hook Plugin</li>
</ul>
<h1 id="创建代码仓库添加Webhooks"><a href="#创建代码仓库添加Webhooks" class="headerlink" title="创建代码仓库添加Webhooks"></a>创建代码仓库添加Webhooks</h1><p>好了，让我们来开始实际操作吧<br>先在Gitlab上创建一个仓库，然后在项目的设置中选择Webhooks，<br>在URL上填<code>http://[jenkins-ip]:8080/gitlab/build_now</code><br>前面是jenkins服务器的IP,端口号默认是8080，如果服务器上有类似tomcat这样的程序占用端口，<br>就需要更改端口号了，这里也就要相应的修改了。<br>还有一种情况，如果是通过<a href="https://jenkins.io/" target="_blank" rel="external">Jenkins官网</a>下载的war包形式，<br>这里的URL就要改为<code>http://[jenkins-ip]:8080/jenkins/gitlab/build_now</code></p>
<h1 id="创建Jenkins项目"><a href="#创建Jenkins项目" class="headerlink" title="创建Jenkins项目"></a>创建Jenkins项目</h1><p>进入我们服务器的Jenkins首页——&gt;点击新建——&gt;输入一个项目名称——&gt;选择构建一个自由风格的软件项目(free-style)点击ok<br>进入了项目配置页面，然后按以下步骤操作就好了</p>
<ol>
<li><p>源码管理设置，选中Git，把刚刚从Gitlab上创建的项目地址复制过来，<br>在这里推荐使用http的形式，避免因为权限的问题导致代码无法pull下来。</p>
</li>
<li><p>构建设置，继续往下拖看到<strong>构建</strong>选项，点击增加构建步骤，可以根据具体项目来选择，<br>在这里以Web的Maven项目为例。<br>选择<code>Invoke top-level Maven targets</code>，Maven Version可根据个人选择，如果要添加自己下载的版本，<br>可在首页——&gt;系统管理——&gt;Global Tool Configuration全局工具配置下面找到Maven进行添加。推荐使用自己的<br><code>Golas</code>框中填写maven的执行命令，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">package</span><br><span class="line">tomcat:redeploy -Dmaven.test.skip=true -e -X</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>之后保存应用即可<br><strong>注意</strong>：这里不需要添加<code>mvn</code>命令，jenkins会自动帮我们添加的，还有每一个命令占<strong>单独一行</strong>。</p>
<h1 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h1><p>好了，基本上都配置完了，现在该我们编写程序代码了。只需要从Gitlab上把源码<code>pull</code>到本地，然后进行coding修改再<code>push</code>上去即可。<br>Jenkins那边会监听到<code>push</code>的操作后就自动<code>pull</code>下载更新代码然后进行相应的构建部署了。<br>进入到Jenkins项目，可以查看到构建历史下面正在构建的项目，点击项目编号，再点击Console Output控制台输出就可以查看构建过程的详细日志了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当然了持续集成肯定没这么简单的，后面应该还要有自动Test测试，导出报告之类的。在这里只是搭建一个最基本最简单的持续集成框架。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;首先安装Jenkins和Gitlab&quot;&gt;&lt;a href=&quot;#首先安装Jenkins和Gitlab&quot; class=&quot;headerlink&quot; title=&quot;首先安装Jenkins和Gitlab&quot;&gt;&lt;/a&gt;首先安装Jenkins和Gitlab&lt;/h1&gt;&lt;p&gt;很简单就不多说了，贴个地址&lt;br&gt;&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins&quot;&gt;Installing Jenkins&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://about.gitlab.com/downloads&quot;&gt;Install a GitLab CE&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CI持续集成" scheme="https://lusyoe.github.io/categories/CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="CI持续集成" scheme="https://lusyoe.github.io/tags/CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之索引实战篇</title>
    <link href="https://lusyoe.github.io/2016/08/21/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B4%A2%E5%BC%95%E5%AE%9E%E6%88%98%E7%AF%87/"/>
    <id>https://lusyoe.github.io/2016/08/21/MySQL基础之索引实战篇/</id>
    <published>2016-08-21T13:29:38.000Z</published>
    <updated>2016-09-03T02:09:36.646Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇已经较为全面的讲述了索引的理论，现在进行实战操作。</p>
<p>在这里只列出常用索引类型的操作，关于更多的索引分类参看<a href="/2016/08/21/MySQL基础之索引理论篇/">MySQL基础之索引理论篇</a></p>
<h1 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h1> <a id="more"></a>
<h2 id="创建表的时候创建索引"><a href="#创建表的时候创建索引" class="headerlink" title="创建表的时候创建索引"></a>创建表的时候创建索引</h2><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> book</span><br><span class="line">(</span><br><span class="line">    bookid    <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    year_pub  <span class="keyword">YEAR</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">INDEX</span>(year_pub)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>上面语句是在year_pub字段上创建索引的</p>
<h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><p>唯一索引只是多加了一个<strong>UNIQUE</strong>关键字，以下语句为在id字段上添加唯一索引并命名为UniqIdx<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> perso</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>    <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">name</span>  <span class="built_in">CHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> UniqIdx(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<h4 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> employee</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>    <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">name</span>  <span class="built_in">CHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    age   <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    info  <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">INDEX</span> MultiIdx(<span class="keyword">id</span>, <span class="keyword">name</span>, age)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><p>FULLTEXT全文索引可以用于全文搜索，但只有<strong>MyISAM</strong>存储引擎才支持，并且必须为CHAR、VARCHAR、TEXT列。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">id</span>    <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">name</span>  <span class="built_in">CHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    age   <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    info  <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    FULLTEXT <span class="keyword">INDEX</span> FullTextIdx(info)</span><br><span class="line">)<span class="keyword">ENGINE</span>=MyISAM;</span><br></pre></td></tr></table></figure>
<p>通过<code>SHOW CREATE TABLE person;</code>可查看创建表的过程。</p>
<h2 id="在已经存在的表上创建索引"><a href="#在已经存在的表上创建索引" class="headerlink" title="在已经存在的表上创建索引"></a>在已经存在的表上创建索引</h2><p>主要是通过<code>ALTER TABLE</code> 和 <code>CREATE INDEX</code> 语句进行的，推荐使用<strong>CREATE INDEX</strong></p>
<h4 id="普通索引-1"><a href="#普通索引-1" class="headerlink" title="普通索引"></a>普通索引</h4><p>在perso表的name上建立名为PoNameIdx的<strong>普通索引</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> perso <span class="keyword">ADD</span> <span class="keyword">INDEX</span> PoNameIdx(<span class="keyword">name</span>(<span class="number">30</span>));</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PoNameIdx <span class="keyword">ON</span> perso(<span class="keyword">name</span>(<span class="number">30</span>));</span><br></pre></td></tr></table></figure>
<p>通过<code>SHOW INDEX FROM perso;</code>命令可以查看perso表当前的所有索引信息。</p>
<h4 id="唯一索引-1"><a href="#唯一索引-1" class="headerlink" title="唯一索引"></a>唯一索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> UniqNameIdx(<span class="keyword">name</span>(<span class="number">30</span>));</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> UniqNameIdx <span class="keyword">ON</span> person(<span class="keyword">name</span>(<span class="number">30</span>));</span><br></pre></td></tr></table></figure>
<h4 id="组合索引-1"><a href="#组合索引-1" class="headerlink" title="组合索引"></a>组合索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">ADD</span> <span class="keyword">INDEX</span> PoAgeAndInfo(age, info);</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> PoAgeAndInfo <span class="keyword">ON</span> person(age, info);</span><br></pre></td></tr></table></figure>
<h4 id="全文索引-1"><a href="#全文索引-1" class="headerlink" title="全文索引"></a>全文索引</h4><p>在这里需要注意，<strong>全文索引</strong>只能在存储引擎为MyISAM的表上使用。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">ADD</span> FULLTEXT <span class="keyword">INDEX</span> infoFTIdx(info);</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">CREATE</span> FULLTEXT <span class="keyword">INDEX</span> infoFTIdx <span class="keyword">ON</span> person(info);</span><br></pre></td></tr></table></figure></p>
<p>如果该字段上已经存在了索引，可以先删除掉，然后再创建。</p>
<h2 id="索引的删除"><a href="#索引的删除" class="headerlink" title="索引的删除"></a>索引的删除</h2><p>相较于索引的创建，删除索引的操作就比较简单很多了。</p>
<h4 id="ALTER-TABLE删除索引"><a href="#ALTER-TABLE删除索引" class="headerlink" title="ALTER TABLE删除索引"></a>ALTER TABLE删除索引</h4><p>遵循以下基本语法格式即可：<br><code>ALTER TABLE table_name DROP INDEX index_name</code><br>如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> person <span class="keyword">DROP</span> <span class="keyword">INDEX</span> infoFTIdx;</span><br></pre></td></tr></table></figure></p>
<h4 id="DROP-INDEX删除索引"><a href="#DROP-INDEX删除索引" class="headerlink" title="DROP INDEX删除索引"></a>DROP INDEX删除索引</h4><p>格式如下：<br><code>DROP INDEX index_name ON table_name</code><br>如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> PoNameIdx <span class="keyword">ON</span> perso;</span><br></pre></td></tr></table></figure>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>最后索引的实战大概就写这么多吧，这些都只是基本操作。实际开发中重点应该是如何选择索引。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇已经较为全面的讲述了索引的理论，现在进行实战操作。&lt;/p&gt;
&lt;p&gt;在这里只列出常用索引类型的操作，关于更多的索引分类参看&lt;a href=&quot;/2016/08/21/MySQL基础之索引理论篇/&quot;&gt;MySQL基础之索引理论篇&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;索引的创建&quot;&gt;&lt;a href=&quot;#索引的创建&quot; class=&quot;headerlink&quot; title=&quot;索引的创建&quot;&gt;&lt;/a&gt;索引的创建&lt;/h1&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://lusyoe.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lusyoe.github.io/tags/MySQL/"/>
    
      <category term="索引" scheme="https://lusyoe.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之索引理论篇</title>
    <link href="https://lusyoe.github.io/2016/08/21/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B4%A2%E5%BC%95%E7%90%86%E8%AE%BA%E7%AF%87/"/>
    <id>https://lusyoe.github.io/2016/08/21/MySQL基础之索引理论篇/</id>
    <published>2016-08-21T12:19:23.000Z</published>
    <updated>2016-09-03T02:09:16.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可极大提高数据库查询的速度。</p>
<h1 id="索引的含义和特点"><a href="#索引的含义和特点" class="headerlink" title="索引的含义和特点"></a>索引的含义和特点</h1><p>索引是一个单独的、存储在磁盘上的数据库接口，它们包含着对数据表里索引记录的引用指针。<br>使用索引用于快速找出在某个或多个列中有一特定的行，所有MySQL列类型都可以被所有，<br>对于相关列使用索引是提高查询操作速度的最佳途径。<br><a id="more"></a></p>
<p>由于索引是在存储引擎中实现的，因此采用不同的存储引擎的表支持的索引类型也不相同。<br>MySQL中索引的存储类型有两种：<code>BTREE</code>和<code>HASH</code>，具体和表的存储引擎相关的是：MyISAM和InnoDB<br>存储引擎只支持BTREE索引；MEMORY/HEAP存储引擎可以支持HASH和BTREE索引。</p>
<h1 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h1><ul>
<li>通过创建唯一索引，可以保证数据库表中每一行数据的唯一性。</li>
<li>可以大大加快数据的查询速度，这也是创建索引的最主要的原因。</li>
<li>在实现数据的参考完整性方面，可以加速表和表之间的连接。</li>
<li>在使用分组和排序子句进行数据查询时，也可以显著的减少查询中分组和排序的时间。</li>
</ul>
<h2 id="索引的缺点"><a href="#索引的缺点" class="headerlink" title="索引的缺点"></a>索引的缺点</h2><ul>
<li>创建索引和维护索引要耗费时间，并且随着数据量的增加所耗费的时间也会增加。</li>
<li>索引需要占磁盘空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，<br>如果有大量的索引，索引文件可能比数据文件更快达到最大文件大小。</li>
<li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</li>
</ul>
<h1 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h1><p>MySQL的索引可以分为以下几类：</p>
<h3 id="普通索引和唯一索引"><a href="#普通索引和唯一索引" class="headerlink" title="普通索引和唯一索引"></a>普通索引和唯一索引</h3><p>   普通索引是MySQL中的基本索引类型，允许在定义索引的列中插入重复值和空值。<br>   唯一索引，索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一，<br>   主键索引是一种特殊的唯一索引，不允许有空值。</p>
<h3 id="单列索引和组合索引"><a href="#单列索引和组合索引" class="headerlink" title="单列索引和组合索引"></a>单列索引和组合索引</h3><p>   单列索引即一个索引只包含单个列，一个表可以有多个单列索引。<br>   组合索引指在表的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，<br>   索引才会被使用。使用组合索引时遵循最左前缀集合。</p>
<h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>   全文索引类型为<strong>FULLTEXT</strong>，在定义索引的列上支持值的全文查找，允许在这些索引列中<br>   插入重复值和空值。全文索引可以在CHAR、VARCHAR或者TEXT类型的列上创建。<br>   MySQL中只有<strong>MyISAM</strong>存储引擎支持全文索引。</p>
<h3 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h3><p>   空间索引是对空间数据类型的字段建立的索引，MySQL中空间数据类型有4种，<br>   分别是：GEOMETRY、POINT、LINESTRING和POLYGON。MySQL使用<strong>SPATIAL</strong>关键字进行扩展，<br>   使得能够用于创建正规索引类似的语法创建空间索引。创建空间索引的列，必须将其声明为NOT NULL，<br>   最后空间索引只能在存储引擎为<strong>MyISAM</strong>的表中创建。</p>
<h1 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h1><p>  索引设计不合理或者缺少索引都会对数据库和应用程序的性能造成障碍。高效的索引对于获得良好的性能非常重要。<br>  设计索引时，应该考虑以下准则：</p>
<ul>
<li><p>索引并非越多越好，一个表如有大量的索引，不仅占用磁盘空间，而且会影响<code>INSERT、DELETE、UPDATE</code>等语句的性能，因为当表中的数据更改的同时，索引也会进行调整和更新。</p>
</li>
<li><p>避免对经常更新的表进行过多的索引，并且索引中的列尽可能少，而对经常用于<strong>查询</strong>的字段应该创建索引，<br>但要避免添加不必要的字段。</p>
</li>
<li><p><strong>数据量小</strong>的表最好不要使用索引，由于数据较少，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果。</p>
</li>
<li><p>在条件表达式中经常用到的<strong>不同值较多</strong>的列上建立索引，在不同值少的列上不要建立索引。<br>比如在用户表的”性别”字段上只有”男”与”女”两个不同值，因此就无须建立索引。如果建立索引不但不会提高查询效率，反而会严重降低更新速度。</p>
</li>
<li><p>当唯一性是某种数据本身的特征时，指定唯一索引。使用唯一索引需能确保定义的列的数据完整性，以提高查询速度。</p>
</li>
<li><p>在频繁进行排序或分组(即进行<code>group by或order by操作</code>)的列上建立索引，如果待排序的列有多个，可以在这些列上建立组合索引。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可极大提高数据库查询的速度。&lt;/p&gt;
&lt;h1 id=&quot;索引的含义和特点&quot;&gt;&lt;a href=&quot;#索引的含义和特点&quot; class=&quot;headerlink&quot; title=&quot;索引的含义和特点&quot;&gt;&lt;/a&gt;索引的含义和特点&lt;/h1&gt;&lt;p&gt;索引是一个单独的、存储在磁盘上的数据库接口，它们包含着对数据表里索引记录的引用指针。&lt;br&gt;使用索引用于快速找出在某个或多个列中有一特定的行，所有MySQL列类型都可以被所有，&lt;br&gt;对于相关列使用索引是提高查询操作速度的最佳途径。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="https://lusyoe.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lusyoe.github.io/tags/MySQL/"/>
    
      <category term="索引" scheme="https://lusyoe.github.io/tags/%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>Idea Maven项目无法下载依赖问题汇总</title>
    <link href="https://lusyoe.github.io/2016/08/21/Idea-Maven%E9%A1%B9%E7%9B%AE%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://lusyoe.github.io/2016/08/21/Idea-Maven项目无法下载依赖问题汇总/</id>
    <published>2016-08-21T11:31:50.000Z</published>
    <updated>2016-09-13T15:47:30.442Z</updated>
    
    <content type="html"><![CDATA[<p>在使用IntelliJ IDEA开发Web的时候，刚开始总是遇到Maven的各种问题。<br>现在总结一下关于无法下载依赖jar的问题。</p>
<h3 id="依赖语法错误"><a href="#依赖语法错误" class="headerlink" title="依赖语法错误"></a>依赖语法错误</h3><a id="more"></a>
<p>有时候没注意，直接就这样写了：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然而，像这种单个的依赖必须要添加到<code>&lt;dependencies&gt;&lt;/dependencies&gt;</code>中间才行。<br>正确的做法应该是这样:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>可恨的是IDE也不提示个什么。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用IntelliJ IDEA开发Web的时候，刚开始总是遇到Maven的各种问题。&lt;br&gt;现在总结一下关于无法下载依赖jar的问题。&lt;/p&gt;
&lt;h3 id=&quot;依赖语法错误&quot;&gt;&lt;a href=&quot;#依赖语法错误&quot; class=&quot;headerlink&quot; title=&quot;依赖语法错误&quot;&gt;&lt;/a&gt;依赖语法错误&lt;/h3&gt;
    
    </summary>
    
      <category term="Maven" scheme="https://lusyoe.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="https://lusyoe.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>回首感悟</title>
    <link href="https://lusyoe.github.io/2016/08/20/%E5%9B%9E%E9%A6%96%E6%84%9F%E6%82%9F/"/>
    <id>https://lusyoe.github.io/2016/08/20/回首感悟/</id>
    <published>2016-08-20T13:42:22.000Z</published>
    <updated>2016-08-29T15:43:21.359Z</updated>
    
    <content type="html"><![CDATA[<p>人生总是充满着选择，每一个选择又会造成截然不同的结果。<br>从13年毕业至今，感觉人生真的是变化很快啊。<br>毕业后，毅然决然的选择了转行，到现在也算是差不多完全融入IT这一行了。<br>很庆幸，当初并没有选择错误。虽然不是科班出身，但凭着一股浓厚的兴趣，能真正入行也是不容易了。</p>
<p>回首一下这3年</p>
<h2 id="2013年6月正式毕业了"><a href="#2013年6月正式毕业了" class="headerlink" title="2013年6月正式毕业了"></a>2013年6月正式毕业了</h2><p>和绝大多数人一样，我毕业后一段时间都是很茫然的状态，不知道到底要做什么，毕竟刚踏入社会，什么都不了解。<br>我选择了回家，由于在毕业之前报考了学校的计算机二级考试，开始在家里自学计算机课程了，编程语言当然只有C了。<br>经过了暑期的几个月学习，最终顺利的考过了，也算是给自己增加了不少信心吧。<br>不过就这样想找工作还是早得很啊。。</p>
<a id="more"></a>
<h2 id="2013年9月-12月-Java起航"><a href="#2013年9月-12月-Java起航" class="headerlink" title="2013年9月-12月 Java起航"></a>2013年9月-12月 Java起航</h2><p>之后又开始自学Java了，当初学Java完全就是奔着Android去的，那时候Android太火了。<br>学Java的过程中又报了计算机网络自考本科，开始全面系统的学习计算机课程了。</p>
<h2 id="2014年3月-6月-自考之路"><a href="#2014年3月-6月-自考之路" class="headerlink" title="2014年3月-6月 自考之路"></a>2014年3月-6月 自考之路</h2><p>2014年可以说是最重要的一年了，由于基础底子太差了，仅仅凭着几个月的学习完全赶不上来。<br>当然了，自考可以说是一败涂地了，几次过后就已经完全放弃了。。<br>在这期间最大的收获就是在武大表哥那里的生活了，完全可以说是表哥带着我从毕业后的迷茫期走出来的。<br>让我真正的建立了一个成年人的思想，有了自己的思想和主见。那段时间思考的最多的就是人生了。<br>我的人生到底要怎么走，自考的失败可以说差点让我放弃了走IT的路了，那段时间整个人也是懵的。<br>也是表哥把我拉出来的，真的是要非常的感谢他了。</p>
<h2 id="2014年7月-8月-初次踏入社会"><a href="#2014年7月-8月-初次踏入社会" class="headerlink" title="2014年7月-8月 初次踏入社会"></a>2014年7月-8月 初次踏入社会</h2><p>2014年的暑期，第一次走入社会寻找工作了，虽然之前在校的时候有过实习经验，但那是建筑行业的了。<br>既然已经打算换行了，当然不想再找那方面的工作了。然而，现实就是这么的残酷，就我这水平什么都找不到。。</p>
<p>无奈只能找一些工厂先去锻炼下了<br>在武汉，去过富士康，由于大专的毕业，居然不要。。好像那些小学毕业的才更吃香啊<br>接连的找了好几个厂子，最后还是在人才市场，找到了一个愿意收我的小厂了。<br>走入工厂才知道那有多么的辛苦啊，每天都是机械性的劳动，还有白班夜班的倒。。</p>
<p>结果自然不言而喻，在那里只做了一周，还是放弃不下计算机编程啊</p>
<h2 id="2014年9月-12月-培训之旅"><a href="#2014年9月-12月-培训之旅" class="headerlink" title="2014年9月-12月 培训之旅"></a>2014年9月-12月 培训之旅</h2><p>在武汉，在网上搜一些计算机实习工作时，发现了培训机构。<br>当然了咱好歹也是成年人了，肯定不会被他们所忽悠，什么包就业，推荐工作啥的，一个字都不会信。<br>但是知识这东西，恰好是我目前最缺乏的，通过网上用人单位的招聘需求，很多东西也不懂。<br>这方面培训机构还是很有经验的，通过到多个培训机构试听，最终还是选择了一个看起来靠谱点的。</p>
<p>培训内容主要为：Java基础、Web入门和Android就业<br>Java基础由于之前有过自学，所以还是挺轻松的，几次测验基本在班里也是第一的<br>Web入门：当时对Web没有太过关注，也就真的只是入个门啦，当然那个讲师还是挺有水平的<br>最关键是Android了，当时真的是挺用心的了，基本上白天学完了，晚上继续敲代码到凌晨1,2点</p>
<p>时间就这样在充实的学习过程中过去了.</p>
<h2 id="2015年2月-3月-工作工作"><a href="#2015年2月-3月-工作工作" class="headerlink" title="2015年2月-3月 工作工作"></a>2015年2月-3月 工作工作</h2><p>培训终于结束了，也算是给我开启了一扇IT的大门吧，经过培训过后，我才感觉已经踏入IT门槛了。<br>2015年2月过完年后，为了发展到深圳来了。<br>刚开始找工作，真的觉得自己还是太嫩了，以至于快1个月才终于找到了一个像样的工作了。<br>当然了，这里还有个小插曲，需要感谢一下当初的培训机构。<br>为了找工作，像我这种出身的，简历当然得要伪造了(惭愧)，不然不用想了。。。<br>新单位居然要打电话给之前的单位调查背景，幸好我当初保存了培训机构的前台号码。</p>
<h2 id="2015年3月-2016年1月-Android实战"><a href="#2015年3月-2016年1月-Android实战" class="headerlink" title="2015年3月-2016年1月 Android实战"></a>2015年3月-2016年1月 Android实战</h2><p>终于终于我找到一份Android开发的工作了，虽然是面向Android TV端的…<br>突然发现自己不会的还是有好多啊，压力有点大。但是日子总得过啊</p>
<p>每天下了班后回来继续看项目学习了，可怜原还以为能有个人带带呢，结果就我1个Android开发。</p>
<p>碰碰磕磕，差不多一年的时间就这样过去了，也差不多熟悉Android app的基本开发了。</p>
<p>在这期间由于意外情况，接触到了Android系统底层的东西了，比如：自己编译ROM刷到盒子里面，静默安装等等</p>
<p>也跟一些厂商有打过交道了，比如：深圳的兆驰、TCL、小霸王等<br>第一次听说了，除了MTK，高通之外的芯片了，如：Amlogic、Rockchip<br>第一次听说并使用了Docker<br>第一次自己去制作.9 图<br>第一次把自己学习到的东西都运用上了<br>等等…</p>
<h2 id="2016年2月-3月-Android系统"><a href="#2016年2月-3月-Android系统" class="headerlink" title="2016年2月-3月 Android系统"></a>2016年2月-3月 Android系统</h2><p>由于种种原因，不得不从这家辞职了。是该考虑下一家的时候了。<br>打算好了去南山发展，毕竟在深圳南山区才是IT科技氛围最浓厚的区域了。<br>刚开始也找了好几家app的开发，不过貌似大部分都对我有系统开发经验有兴趣点，<br>那我是该考虑一下方向了，毕竟相对于app来说，我对系统底层也是更有兴趣一点(讨厌UI)。。</p>
<p>最终在科技园附近找到了一家偏系统开发的工作了，我也没想到人生第一次薪水过万会来的如此之快。</p>
<p>刚入职肯定是要好好表现了，发现他们居然连版本控制工具都没用，文件都是copy来copy去的。<br>咱现在也不是那种刚入行的嫩鸟了，而且对于系统源码来说，没有版本控制实在是太容易出错了。</p>
<p>由于之前在上一家的学习，知道了怎么搭建一整套源码管理。<br>耗费一周的时间，成功的搭建起了gitlab + repo + git的源码管理系统。<br>gitlab作为最上层的操作界面，项目组每个人接触最多的东西<br>repo 来着google官方的Android系统源码管理工具，可以管理许多的git小仓库<br>git 最底层当然是使用git了，最流行最适合最好的系统源码管理工具了</p>
<p>然而git毕竟学习成本较高啊，在我走之后他们就没法使用了。。。</p>
<h2 id="2016年3月-至今-正式Android-Framework-Engineer"><a href="#2016年3月-至今-正式Android-Framework-Engineer" class="headerlink" title="2016年3月-至今 正式Android Framework Engineer"></a>2016年3月-至今 正式Android Framework Engineer</h2><p>是的，我只在上一家待一个月就跳槽走了，原因说起来很可笑，有时候星期六要加班，而且还是免费的…<br>我不喜欢这样，虽然都说在IT这行加班是很普遍的，但是那也是要有相应的补贴才行啊。免费的工，抱歉我不会打。</p>
<p>经过了一周的找工作面试，最终我却选择了外包公司。整个行业都在说外包怎么怎么的坑，当然了不排除确实有那么一些。</p>
<p>但是这家能给出比我上一家还要多出50%的薪水，我没理由不去啊。<br>入职之后就是直接到某手机厂商那上班了，是说长期驻场来着。跟他们的员工一样的工作上班等<br>在这里加班还是挺少的，待遇也不错，真的很满意了</p>
<p>发现了外包也有不错啊，很多东西光只听别人说真的很容易造成误导。小时候都听说过小马过河故事呢</p>
<p>还有就是在大公司就是不一样，流程非常的严谨，整个的开发流程就跟我之前所经历的完全不一样。<br>第一次见识到了code review、自动化Test等各种流程了，感觉学到了很多。</p>
<p>在这里我也被分配到了framework组，做一些中间层功能接口开发、移植和Bug的修复等工作</p>
<p>然而，时间过去我发现自己没有了对Android的热爱，少了当初的那一份激情了。<br>在这个暑期，我又对Java大数据，分布式感兴趣了起来。<br>不，应该说我始终对编程有着热爱，但是现在每天却很少coding了，而Android即使是app项目的代码量也不大。<br>并没有充分的展现出现编程的艺术来。是的，编程不仅仅是一种技术，更应该是一种艺术。</p>
<p>话说，今年看书还是看的挺多的，光这个暑期就看完3本了《Head First 设计模式》、《MySQL 5.5》、《分布式Java应用》<br>可以看到，基本都是为下一步做的技术储备了，相比上半年看的《深入理解Android》系列等Android系统开发方面书籍确实变化蛮大的。</p>
<p>我想我已经做好了选择，不管以后的结果如何，选择了就不会后悔~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生总是充满着选择，每一个选择又会造成截然不同的结果。&lt;br&gt;从13年毕业至今，感觉人生真的是变化很快啊。&lt;br&gt;毕业后，毅然决然的选择了转行，到现在也算是差不多完全融入IT这一行了。&lt;br&gt;很庆幸，当初并没有选择错误。虽然不是科班出身，但凭着一股浓厚的兴趣，能真正入行也是不容易了。&lt;/p&gt;
&lt;p&gt;回首一下这3年&lt;/p&gt;
&lt;h2 id=&quot;2013年6月正式毕业了&quot;&gt;&lt;a href=&quot;#2013年6月正式毕业了&quot; class=&quot;headerlink&quot; title=&quot;2013年6月正式毕业了&quot;&gt;&lt;/a&gt;2013年6月正式毕业了&lt;/h2&gt;&lt;p&gt;和绝大多数人一样，我毕业后一段时间都是很茫然的状态，不知道到底要做什么，毕竟刚踏入社会，什么都不了解。&lt;br&gt;我选择了回家，由于在毕业之前报考了学校的计算机二级考试，开始在家里自学计算机课程了，编程语言当然只有C了。&lt;br&gt;经过了暑期的几个月学习，最终顺利的考过了，也算是给自己增加了不少信心吧。&lt;br&gt;不过就这样想找工作还是早得很啊。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="感悟总结" scheme="https://lusyoe.github.io/tags/%E6%84%9F%E6%82%9F%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins新建Maven项目构建出现mvn command execution faild</title>
    <link href="https://lusyoe.github.io/2016/08/10/Jenkins%E6%96%B0%E5%BB%BAMaven%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E5%87%BA%E7%8E%B0mvn-command-execution-faild/"/>
    <id>https://lusyoe.github.io/2016/08/10/Jenkins新建Maven项目构建出现mvn-command-execution-faild/</id>
    <published>2016-08-09T22:49:44.000Z</published>
    <updated>2016-08-29T15:09:29.803Z</updated>
    
    <content type="html"><![CDATA[<p>第一次用Jenkins作持续集成自动化构建，难免经验不足。<br>安装好，一来就直接新建一个Maven任务，然后就立即构建了，结果控制台总是输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FATAL: <span class="built_in">command</span> execution failed</span><br><span class="line">java.io.IOException: Cannot run program <span class="string">"mvn"</span> (<span class="keyword">in</span> directory)</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p>
<p>百度google，无果。最终发现了原来是Jenkins工具里没有配置Maven…</p>
<ul>
<li>回到Jenkis主目录，点击左边的<code>系统管理</code></li>
<li>点击<code>全局工具配置(Global Tool Configuration)</code></li>
<li>拖到最下面发现有一个Maven项目，点击<code>新增Maven</code>,默认可以选择在线自动下载安装，<br>如果本地已经安装了的话，可以去掉<code>自动安装</code>,输入安装的根路径。</li>
</ul>
<p>最后保存应用一下，再尝试build，果然成功了^_^</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次用Jenkins作持续集成自动化构建，难免经验不足。&lt;br&gt;安装好，一来就直接新建一个Maven任务，然后就立即构建了，结果控制台总是输出&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
    
    </summary>
    
      <category term="Jenkins" scheme="https://lusyoe.github.io/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://lusyoe.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Shadowsocks日志中failed to recv data in handshakeReceive2Callback的错误解决办法</title>
    <link href="https://lusyoe.github.io/2016/07/27/Shadowsocks%E6%97%A5%E5%BF%97%E4%B8%ADfailed-to-recv-data-in-handshakeReceive2Callback%E7%9A%84%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://lusyoe.github.io/2016/07/27/Shadowsocks日志中failed-to-recv-data-in-handshakeReceive2Callback的错误解决办法/</id>
    <published>2016-07-27T15:12:30.000Z</published>
    <updated>2016-08-29T16:16:07.638Z</updated>
    
    <content type="html"><![CDATA[<p>最近重装了一下Win7系统，装好常用软件后，突然发现上google的时候shadowsocks不能用了，<br>但是在Linux下用的好好的，刚开始还以为是系统的问题，差点就再重装了。<br>最后通过log日志分析，然后再通过VPN进行goole搜索(百度基本搜不到什么有效信息)，<br>找到了<a href="http://www.hudawei.net/archives/38" target="_blank" rel="external">胡大伟的官方网站</a>的这篇blog，刚好解决了问题。:)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Win+r services.msc打开服务管理窗口在里面找到xlserviceplatform把这个服务禁用了。</span><br><span class="line">找到C:\Program Files(x86)\Common Files\Thunder Network\ServicePlatform\XLSP.dll文件</span><br><span class="line">删除之即可</span><br></pre></td></tr></table></figure></p>
<p>幕后真凶原来是迅雷，对国内这些东西已经是彻底无语了。</p>
<p>在这里感谢下胡大伟!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近重装了一下Win7系统，装好常用软件后，突然发现上google的时候shadowsocks不能用了，&lt;br&gt;但是在Linux下用的好好的，刚开始还以为是系统的问题，差点就再重装了。&lt;br&gt;最后通过log日志分析，然后再通过VPN进行goole搜索(百度基本搜不到什么有效
    
    </summary>
    
      <category term="shadowsocks" scheme="https://lusyoe.github.io/categories/shadowsocks/"/>
    
    
      <category term="shadowsocks" scheme="https://lusyoe.github.io/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt之Log篇</title>
    <link href="https://lusyoe.github.io/2016/06/04/OpenWrt%E4%B9%8BLog%E7%AF%87/"/>
    <id>https://lusyoe.github.io/2016/06/04/OpenWrt之Log篇/</id>
    <published>2016-06-04T15:50:16.000Z</published>
    <updated>2016-08-29T16:15:43.022Z</updated>
    
    <content type="html"><![CDATA[<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-generate-toc again -->
<p><strong>目录</strong></p>
<ul>
<li><a href="#简介">简介</a></li>
<li><a href="#logread">logread</a></li>
<li><a href="#上传到远程rsyslog服务器">上传到远程rsyslog服务器</a></li>
<li><a href="#配置rsyslog">配置rsyslog</a></li>
<li><a href="#处理问题">处理问题</a></li>
<li><a href="#总结">总结</a><!-- markdown-toc end -->
</li>
</ul>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>我接触OpenWrt也不长，之所以关注log这个东西，主要是前段时间路由器总是断线，所以想要分析一下原因．</p>
<h1 id="logread"><a href="#logread" class="headerlink" title="logread"></a>logread</h1><p>在OpenWrt中可通过<code>logread</code>命令查看运行时的log日志，我一般都是通过ssh进行远程访问路由器的．<br>不过每次查看log，都要登陆进去，然后不断的敲logread也是很麻烦的，<br>正好OpenWrt的web设置界面中有设置上传日志的选项，在我这是 系统—&gt;日志里面<br><a id="more"></a></p>
<h1 id="上传到远程rsyslog服务器"><a href="#上传到远程rsyslog服务器" class="headerlink" title="上传到远程rsyslog服务器"></a>上传到远程rsyslog服务器</h1><p>由于之前每次看日志都不太方便，我们可以将日志文件上传到本地的Linux机器中，<br>我一般使用的是Ubuntu/Debian系的，现在一般的Linux发行系统都已经预装了rsyslog了，<br>因此我们只需要配置一下即可．</p>
<h1 id="配置rsyslog"><a href="#配置rsyslog" class="headerlink" title="配置rsyslog"></a>配置rsyslog</h1><p>首先配置服务端，也即是我们使用的Linux系统主机.<br><code>$ sudo vim /etc/rsyslog.conf</code><br>找到<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># provides UDP syslog reception</span></span><br><span class="line"><span class="comment">#module(load="imudp")</span></span><br><span class="line"><span class="comment">#input(type="imudp" port="514")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># provides TCP syslog reception</span></span><br><span class="line"><span class="comment">#module(load="imtcp")</span></span><br><span class="line"><span class="comment">#input(type="imtcp" port="514"</span></span><br></pre></td></tr></table></figure></p>
<p>一般只需要打开TCP就好，不过为了还有其他用途可以将UDP的也全部都打开，除去相应的<strong>#</strong>注释即可．<br>修改后的样子<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># provides UDP syslog reception</span></span><br><span class="line">module(load=<span class="string">"imudp"</span>)</span><br><span class="line">input(<span class="built_in">type</span>=<span class="string">"imudp"</span> port=<span class="string">"514"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># provides TCP syslog reception</span></span><br><span class="line">module(load=<span class="string">"imtcp"</span>)</span><br><span class="line">input(<span class="built_in">type</span>=<span class="string">"imtcp"</span> port=<span class="string">"514"</span></span><br></pre></td></tr></table></figure></p>
<p>这样还没完，我们还需要配置log存放的位置．<br>进入<code>/etc/rsyslog.d/</code>目录，新建一个<code>router.conf</code>文件<br>编辑添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:fromhost-ip, isequal, <span class="string">"192.168.1.1"</span> /var/spool/rsyslog/router.log</span><br><span class="line">&amp;~</span><br></pre></td></tr></table></figure></p>
<p><code>192.168.1.1</code>表示路由器的地址<br>后面路径就表示了上传到本地主机的log地址了<br>最后的符号<strong>&amp;~</strong>表示了一个重定向规则，被用来告知rsyslog守护进程停止对日志消息的进一步处理，并且不要在本地写入。<br>如果没有使用该重定向规则，那么所有的远程消息都会在写入上述描述的日志文件之外同时被写入到本地日志文件，这就意味着日志消息实际上被写了两次。</p>
<p>然后如果还有什么特殊需求的话，比如：像系统日志一样，自动打包之类的<br>可以在<code>/etc/logrotate.d/</code>目录下面新建文件，然后进行添加．<br>在这里我偷个懒，直接写在<strong>rsyslog</strong>文件里面．</p>
<p><code>$ sudo vim /etc/logrotate.d/rsyslog</code><br>随便找一个规则，将我们路由器log存放的地址写在上面即可</p>
<p>最后还有，需要重启一下rsyslog系统服务<br><code>$ sudo systemctl restart rsyslog.service</code></p>
<p>查看一下是否在监听<br><code>$ sudo netstat -tulpn |grep rsyslogd</code></p>
<p>以上服务端配置好了，客户端也就是路由器那里就很好配了．<br>可以通过可视化的web界面进行管理，也可以直接命令行登陆进路由器,然后改配置文件的方式．</p>
<p>下面是我的路由器管理界面<br><img src="/image/log.png" alt="log"></p>
<p>改配置文件的话，就直接ssh连进路由器<br><code># vim /etc/config/system</code><br>找到<strong>config system</strong>在下面添加即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">config system</span><br><span class="line">        option hostname <span class="string">'OpenWrt'</span></span><br><span class="line">        option conloglevel <span class="string">'8'</span></span><br><span class="line">        option cronloglevel <span class="string">'8'</span></span><br><span class="line">        option <span class="built_in">log</span>_ip <span class="string">'192.168.1.247'</span></span><br><span class="line">        option <span class="built_in">log</span>_port <span class="string">'514'</span></span><br><span class="line">        option <span class="built_in">log</span>_size <span class="string">'200'</span></span><br></pre></td></tr></table></figure></p>
<p>然后保存并应用，过一会就可以在本机上看到路由上的log了</p>
<h1 id="处理问题"><a href="#处理问题" class="headerlink" title="处理问题"></a>处理问题</h1><p>上面说了一大堆log的配置，最终的目的只是方便分析日志．而我们分析日志就是为了解决问题的．．．<br>分析日志：<br>发现有很多的这种信息<br><code>daemon.warn odhcpd[903]: A default route is present but there is no public prefix on br-lan thus we don&#39;t announce a default route!</code><br>这个是因为开启了IPv6的原因，我们用不上，关掉即可</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我感觉问题不太可能是出现在IPv6上面的，虽然我关掉后确实断线的情况好了很多．．<br>通过这次鼓捣，让我又对OpenWrt熟悉了不少，当然最大的收获还是rsyslog了，<br>之前虽然知道有这么个东西，但一直没有机会去用上它，配置过一次后感觉以后就熟悉多了．</p>
]]></content>
    
    <summary type="html">
    
      &lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-generate-toc again --&gt;
&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#简介&quot;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#logread&quot;&gt;logread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#上传到远程rsyslog服务器&quot;&gt;上传到远程rsyslog服务器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#配置rsyslog&quot;&gt;配置rsyslog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#处理问题&quot;&gt;处理问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#总结&quot;&gt;总结&lt;/a&gt;&lt;!-- markdown-toc end --&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;我接触OpenWrt也不长，之所以关注log这个东西，主要是前段时间路由器总是断线，所以想要分析一下原因．&lt;/p&gt;
&lt;h1 id=&quot;logread&quot;&gt;&lt;a href=&quot;#logread&quot; class=&quot;headerlink&quot; title=&quot;logread&quot;&gt;&lt;/a&gt;logread&lt;/h1&gt;&lt;p&gt;在OpenWrt中可通过&lt;code&gt;logread&lt;/code&gt;命令查看运行时的log日志，我一般都是通过ssh进行远程访问路由器的．&lt;br&gt;不过每次查看log，都要登陆进去，然后不断的敲logread也是很麻烦的，&lt;br&gt;正好OpenWrt的web设置界面中有设置上传日志的选项，在我这是 系统—&amp;gt;日志里面&lt;br&gt;
    
    </summary>
    
      <category term="OpenWrt | Log" scheme="https://lusyoe.github.io/categories/OpenWrt-Log/"/>
    
    
      <category term="OpenWrt" scheme="https://lusyoe.github.io/tags/OpenWrt/"/>
    
      <category term="Log" scheme="https://lusyoe.github.io/tags/Log/"/>
    
  </entry>
  
  <entry>
    <title>OpenWrt之初相识篇</title>
    <link href="https://lusyoe.github.io/2016/06/04/OpenWrt%E4%B9%8B%E5%88%9D%E7%9B%B8%E8%AF%86%E7%AF%87/"/>
    <id>https://lusyoe.github.io/2016/06/04/OpenWrt之初相识篇/</id>
    <published>2016-06-04T15:47:34.000Z</published>
    <updated>2016-08-29T16:15:34.814Z</updated>
    
    <content type="html"><![CDATA[<p>  最早是在几年前就知道了OpenWrt的，当时只是为了”翻墙”更方便点，才搜到这个东西的．．<br>然而无奈能力有限，一直没法去把玩尝试它．去年刚好我哥买了一个很便宜的路由器，用不上就给我了．<br>我想着这个反正弄坏了也没太大关系，就又去网上找各种资料了，什么不死uboot啦，什么高科固件一大堆的．</p>
<p>总之折腾了好几天终于是弄好了.<br>看这高大上的界面，简直要甩原厂自带那个丑爆的界面好几条街．<br>功能更是没法比．．<br><img src="/image/router.png" alt="router"></p>
<p>最让人兴奋的就是可以装各种第三方的软件了，其中就包含Shadowsocks翻墙工具，我最初的目的也就是这个了．<br>作为一个技术人员，不能google查找资料，就算是不称职的啦．<br>政治这种东西我们不关心，但是技术文档和问题解决方案这些却是必不可少的了．<br><img src="/image/router_soft.png" alt="router_soft"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最早是在几年前就知道了OpenWrt的，当时只是为了”翻墙”更方便点，才搜到这个东西的．．&lt;br&gt;然而无奈能力有限，一直没法去把玩尝试它．去年刚好我哥买了一个很便宜的路由器，用不上就给我了．&lt;br&gt;我想着这个反正弄坏了也没太大关系，就又去网上找各种资料了，什么不死ubo
    
    </summary>
    
      <category term="OpenWrt" scheme="https://lusyoe.github.io/categories/OpenWrt/"/>
    
    
      <category term="OpenWrt" scheme="https://lusyoe.github.io/tags/OpenWrt/"/>
    
  </entry>
  
  <entry>
    <title>Linux软件篇之Docker</title>
    <link href="https://lusyoe.github.io/2016/03/09/Linux%E8%BD%AF%E4%BB%B6%E7%AF%87%E4%B9%8BDocker/"/>
    <id>https://lusyoe.github.io/2016/03/09/Linux软件篇之Docker/</id>
    <published>2016-03-09T14:49:05.000Z</published>
    <updated>2016-08-29T15:09:29.803Z</updated>
    
    <content type="html"><![CDATA[<p>我是在2014年就开始接触docker的，那时候docker刚刚火起来，最开始只是把它当做是虚拟机的一种替代品吧，而且启动速度快，消耗的硬件资源也没一般虚拟机那么大，可以说是跟主机共享使用资源的，不像虚拟机，要一开始就固定的进行分配。。<br>    在2015年的时候，我就开始尝试着在工作中使用它了。那时候刚做android系统开发，被那个编译环境搭建搞的欲死欲活的，就想有什么方法可以一键搭建哦。<br>然后当时公司服务器都使用的是centos，但android编译环境可要求的是Ubuntu呀，没办法就想到了虚拟化。最后就又想到Docker了，在网上找了找，果然已经有国外的大神写好了针对<a href="https://github.com/stucki/docker-cyanogenmod" target="_blank" rel="external">CyanogenMod</a>的dockerfile环境搭建了。拉下来一键就部署好了。</p>
<a id="more"></a>
<p>下面记录一下当时使用的笔记吧。</p>
<h3 id="Ubuntu修改Docker服务启动默认数据文件存放位置"><a href="#Ubuntu修改Docker服务启动默认数据文件存放位置" class="headerlink" title="Ubuntu修改Docker服务启动默认数据文件存放位置"></a>Ubuntu修改Docker服务启动默认数据文件存放位置</h3><p>默认Docker将数据文件都放在<code>/var/lib/docker</code>中，如果该分区不是很大的话，不利于后期的扩展，尤其是作为android源码项目来说的，因此可修改配置文件，使其数据存储路径指定在其他位置。</p>
<ul>
<li>Upstart方式：编辑<code>/etc/default/docker</code> ，添加<code>DOCKER_OPTS=&quot;-g /opt/docker&quot;</code> 即可改到/opt/docker路径中。</li>
<li>Systemd方式：</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我是在2014年就开始接触docker的，那时候docker刚刚火起来，最开始只是把它当做是虚拟机的一种替代品吧，而且启动速度快，消耗的硬件资源也没一般虚拟机那么大，可以说是跟主机共享使用资源的，不像虚拟机，要一开始就固定的进行分配。。&lt;br&gt;    在2015年的时候，我就开始尝试着在工作中使用它了。那时候刚做android系统开发，被那个编译环境搭建搞的欲死欲活的，就想有什么方法可以一键搭建哦。&lt;br&gt;然后当时公司服务器都使用的是centos，但android编译环境可要求的是Ubuntu呀，没办法就想到了虚拟化。最后就又想到Docker了，在网上找了找，果然已经有国外的大神写好了针对&lt;a href=&quot;https://github.com/stucki/docker-cyanogenmod&quot;&gt;CyanogenMod&lt;/a&gt;的dockerfile环境搭建了。拉下来一键就部署好了。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://lusyoe.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://lusyoe.github.io/tags/Linux/"/>
    
      <category term="Docker" scheme="https://lusyoe.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
