<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风格</title>
  
  <subtitle>风起于青萍之末</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lusyoe.github.io/"/>
  <updated>2019-09-08T13:18:02.240Z</updated>
  <id>https://lusyoe.github.io/</id>
  
  <author>
    <name>卢浩元</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jenkins-kubernetes模板继承</title>
    <link href="https://lusyoe.github.io/2019/09/08/jenkins-kubernetes%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF/"/>
    <id>https://lusyoe.github.io/2019/09/08/jenkins-kubernetes模板继承/</id>
    <published>2019-09-08T12:37:54.000Z</published>
    <updated>2019-09-08T13:18:02.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>基于kubernetes的jenkins动态构建已经使用一段时间了，最近刚好遇到一个小问题：如何在离线环境中构建。<br>因为<code>jenkins slave</code>镜像默认是使用的官方仓库的，而我们的需求是将这里改为私有仓库的。<br>其实实现方式有多种，这里记录下通过插件的<code>继承</code>方式实现。</p><h1 id="修改模板"><a href="#修改模板" class="headerlink" title="修改模板"></a>修改模板</h1><p>首先我们需要修改默认模板，进入Jenkins——&gt;系统管理——&gt;系统设置，拖动到最下面的<code>云模板</code>。<br>修改镜像中容器列表的Docker镜像地址，如下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/jenkins-cloud-image.png" alt="jenkins-cloud-image" title>                </div>                <div class="image-caption">jenkins-cloud-image</div>            </figure></p><h1 id="Jenkinsfile继承"><a href="#Jenkinsfile继承" class="headerlink" title="Jenkinsfile继承"></a>Jenkinsfile继承</h1><p>修改保存好模板后，在Jenkinsfile中指定继承的名字即可，在<code>podTemplate</code>添加内容：<br><code>inheritFrom: &#39;default&#39;</code>，完整配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">podTemplate(label: label, cloud: &apos;kubernetes&apos;, </span><br><span class="line">    inheritFrom: &apos;default&apos;, containers: [])</span><br></pre></td></tr></table></figure></p><h1 id="示例项目"><a href="#示例项目" class="headerlink" title="示例项目"></a>示例项目</h1><p>完整示例项目参看：<a href="https://github.com/lusyoe/springboot-k8s-example" target="_blank" rel="noopener">https://github.com/lusyoe/springboot-k8s-example</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;基于kubernetes的jenkins动态构建已经使用一段时间了，最近刚好遇到一个小问题：如何在离线环境中构建。&lt;br&gt;因为&lt;code&gt;j
      
    
    </summary>
    
    
      <category term="Jenkins" scheme="https://lusyoe.github.io/tags/Jenkins/"/>
    
      <category term="Kubernetes" scheme="https://lusyoe.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>k8s可用区调度</title>
    <link href="https://lusyoe.github.io/2019/07/08/k8s%E5%8F%AF%E7%94%A8%E5%8C%BA%E8%B0%83%E5%BA%A6/"/>
    <id>https://lusyoe.github.io/2019/07/08/k8s可用区调度/</id>
    <published>2019-07-08T05:49:43.000Z</published>
    <updated>2019-07-08T06:11:22.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在正式生产环境中，有时候会采用多个可用区以保障应用环境的高可用。</p><p>然后环境高可用了，应用也需要做到高可用，在多个可用区的情况下，我们需要<code>平均</code>在多个可用区中部署实例。</p><p>默认kubernetes中也支持可用区的分派，这里简单介绍一下。</p><h1 id="亲和性"><a href="#亲和性" class="headerlink" title="亲和性"></a>亲和性</h1><p>亲和性是优化调度的一种方案，可以解决以下问题：</p><ul><li>Pod固定调度到某些节点之上 </li><li>Pod不会调度到某些节点之上 </li><li>Pod的多副本调度到相同的节点之上 </li><li>Pod的多副本调度到不同的节点之上<br>这里我们的场景适用于<code>第四个</code>，多副本调度到不同的节点。</li></ul><h1 id="分配可用区"><a href="#分配可用区" class="headerlink" title="分配可用区"></a>分配可用区</h1><p>在默认初始情况下，集群节点是没有可用区概念的，所有的都在一个平面上，最多是以node为分割，如下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/init_pod.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>我们可以自己分配一下可用区，也就是以<code>一组Node</code>为单位，这里使用<code>label</code>来进行标记，默认集群Node状态为1个Master，4个Node。概况如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/k8s-node-overview.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>我们可以将<code>13、14节点</code>标记为可用区1，命名为<code>az1</code>，<code>15、16节点</code>标记为可用区2，命名为<code>az2</code>。使用以下命令进行标记：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl label node 172.18.10.13 failure-domain.beta.kubernetes.io/zone=az1</span><br><span class="line">kubectl label node 172.18.10.14 failure-domain.beta.kubernetes.io/zone=az1</span><br><span class="line">kubectl label node 172.18.10.15 failure-domain.beta.kubernetes.io/zone=az2</span><br><span class="line">kubectl label node 172.18.10.16 failure-domain.beta.kubernetes.io/zone=az2</span><br></pre></td></tr></table></figure></p><p>分配过后的节点拓扑结构大致如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/zone_pod.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>最后可以通过以下命令查看到可用区配置：<br><code>kubectl get node --show-labels</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/k8s-node-labels.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>如果配置错了，也可以通过以下命令进行删除：<br><code>kubectl label node 172.18.10.13 failure-domain.beta.kubernetes.io/zone-</code><br>修改node后面对应的IP即可。</p><h1 id="亲和性配置"><a href="#亲和性配置" class="headerlink" title="亲和性配置"></a>亲和性配置</h1><p>可用区已经分配好了以后，还需要配置一下部署的亲和性，只需要在Deployment的template字段下面添加以下配置即可：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">affinity:</span></span><br><span class="line"><span class="attr">  podAntiAffinity:</span></span><br><span class="line"><span class="attr">    preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line"><span class="attr">    - weight:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">      podAffinityTerm:</span></span><br><span class="line"><span class="attr">        labelSelector:</span></span><br><span class="line"><span class="attr">          matchExpressions:</span></span><br><span class="line"><span class="attr">          - key:</span> <span class="string">name</span></span><br><span class="line"><span class="attr">            operator:</span> <span class="string">In</span></span><br><span class="line"><span class="attr">            values:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">        topologyKey:</span> <span class="string">"failure-domain.beta.kubernetes.io/zone"</span></span><br></pre></td></tr></table></figure></p><p>其中<code>labelSelector</code>下面的匹配规则需要根据实际的情况来，需要与<code>template</code>下面的<code>metadata→labels</code>对应。</p><p>完整的示例如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  replicas:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    matchLabels:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      affinity:</span></span><br><span class="line"><span class="attr">        podAntiAffinity:</span></span><br><span class="line"><span class="attr">          preferredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line"><span class="attr">          - weight:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">            podAffinityTerm:</span></span><br><span class="line"><span class="attr">              labelSelector:</span></span><br><span class="line"><span class="attr">                matchExpressions:</span></span><br><span class="line"><span class="attr">                - key:</span> <span class="string">name</span></span><br><span class="line"><span class="attr">                  operator:</span> <span class="string">In</span></span><br><span class="line"><span class="attr">                  values:</span></span><br><span class="line"><span class="bullet">                  -</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">              topologyKey:</span> <span class="string">"failure-domain.beta.kubernetes.io/zone"</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">          image:</span> <span class="string">"nginx:alpine"</span></span><br><span class="line"><span class="attr">          imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="attr">          ports:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">              containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure></p><p>当我们指定亲和性配置以后，这里最终调度也会分为几种情况：</p><ul><li>当我们指定的副本实例数量为1，也就是小于可用区时，最终调度会根据可用区资源情况，随机分配</li><li>当我们指定副本实例数量为2，也就是跟可用区相同时，最终就会分别在两个可用区中运行着2个副本实例</li><li>当我们指定副本实例数量大于2，也就是大于可用区数量时，最终会先分别在可用区中调度副本，然后根据资源使用情况，在某个可用区中部署多个副本。</li></ul><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>最后我们根据上面的示例，运行一下测试看看。</p><h2 id="副本小于可用区"><a href="#副本小于可用区" class="headerlink" title="副本小于可用区"></a>副本小于可用区</h2><p>首先我们把副本数量(replicas)调整为1，也就是小于可用区数量，看看调度情况：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/less-zone.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>根据上面截图，可以看到，第一次调度在az2的可用区内，第二次调度在az1的可用区内了。</p><h2 id="副本等于可用区"><a href="#副本等于可用区" class="headerlink" title="副本等于可用区"></a>副本等于可用区</h2><p>接下来我们再把副本数量调整为2，也就是等于可用区数量，看看调度情况：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/equals-zone.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>根据上面截图，我们可以看到，不管我们重新部署几次，始终是分别<code>平均</code>调度在两个可用区内的。<br><code>注：</code>当副本数量大于可用区的倍数时，也会进行平均调度。</p><h2 id="副本大于可用区"><a href="#副本大于可用区" class="headerlink" title="副本大于可用区"></a>副本大于可用区</h2><p>最后我们再测试一下，副本大于可用区数量时的情况，这里我们将副本<code>设置为3</code>看看调度：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/greater-zone.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>根据实际的调度情况，可以看出首先确实是平均在可用区运行了，多的则根据资源情况选择可用区进行运行。<br>这也验证了我们一开始定下来的结论。</p><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>这里对于亲和性的使用还是属于比较简单的一种，但却是比较实用的。更多的场景待我们后续再慢慢可以补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在正式生产环境中，有时候会采用多个可用区以保障应用环境的高可用。&lt;/p&gt;
&lt;p&gt;然后环境高可用了，应用也需要做到高可用，在多个可用区的情况下
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://lusyoe.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>cert-manager之自定义CA Issuer</title>
    <link href="https://lusyoe.github.io/2019/06/22/cert-manager%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89CA-Issuer/"/>
    <id>https://lusyoe.github.io/2019/06/22/cert-manager之自定义CA-Issuer/</id>
    <published>2019-06-22T13:23:39.000Z</published>
    <updated>2019-06-22T13:29:40.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>cert-manager在k8s平台中用的越来越广泛了，通过它可以更方便的管理https证书，可以<code>自动生成secret、自动续签和取消</code>等等。</p><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/cert-manager-overview.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>上面是官方给出的架构图，可以看到cert-manager在k8s中定义了两个自定义类型资源：Issuer和Certificate。</p><p>其中<code>Issuer</code>代表的是证书颁发者，可以定义各种提供者的证书颁发者，当前支持基于<code>Letsencrypt、vault和CA的证书颁发者</code>，还可以定义不同环境下的证书颁发者。</p><p>而<code>Certificate</code>代表的是生成证书的请求，一般其中存入生成证书的元信息，如域名等等。</p><p>一旦在k8s中定义了上述两类资源，部署的cert-manager则会根据Issuer和Certificate生成TLS证书，并将证书保存进k8s的<code>Secret</code>资源中，然后在Ingress资源中就可以引用到这些生成的Secret资源。对于已经生成的证书，还是定期检查证书的有效期，如即将超过有效期，还会自动续期。</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>部署cert-manager还是比较简单的，这里我们通过helm进行部署:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">helm install --name cert-manager </span><br><span class="line">--namespace kube-system </span><br><span class="line">--<span class="built_in">set</span> ingressShim.defaultIssuerName=ca-issuer </span><br><span class="line">--<span class="built_in">set</span> ingressShim.defaultIssuerKind=ClusterIssuer </span><br><span class="line">stable/cert-manager</span><br></pre></td></tr></table></figure></p><p>这里我们部署了cert-manager并且指定了默认的Issuer为我们自定义的CA，默认的<code>IssuerKind</code>为<code>ClusterIssuser</code>。</p><h1 id="创建CA证书"><a href="#创建CA证书" class="headerlink" title="创建CA证书"></a>创建CA证书</h1><p>这里我们通过cfssl创建一套自己的CA。</p><h2 id="CA配置文件"><a href="#CA配置文件" class="headerlink" title="CA配置文件"></a>CA配置文件</h2><p>ca-config.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"signing"</span>: &#123;</span><br><span class="line">    <span class="attr">"default"</span>: &#123;</span><br><span class="line">      <span class="attr">"expiry"</span>: <span class="string">"876000h"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"profiles"</span>: &#123;</span><br><span class="line">      <span class="attr">"kubernetes"</span>: &#123;</span><br><span class="line">        <span class="attr">"usages"</span>: [</span><br><span class="line">            <span class="string">"signing"</span>,</span><br><span class="line">            <span class="string">"key encipherment"</span>,</span><br><span class="line">            <span class="string">"server auth"</span>,</span><br><span class="line">            <span class="string">"client auth"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"expiry"</span>: <span class="string">"876000h"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CA证书请求文件"><a href="#CA证书请求文件" class="headerlink" title="CA证书请求文件"></a>CA证书请求文件</h2><p>ca-csr.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"CN"</span>: <span class="string">"kubernetes"</span>,</span><br><span class="line">  <span class="attr">"key"</span>: &#123;</span><br><span class="line">    <span class="attr">"algo"</span>: <span class="string">"rsa"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">2048</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"names"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"C"</span>: <span class="string">"CN"</span>,</span><br><span class="line">      <span class="attr">"ST"</span>: <span class="string">"WuHan"</span>,</span><br><span class="line">      <span class="attr">"L"</span>: <span class="string">"XS"</span>,</span><br><span class="line">      <span class="attr">"O"</span>: <span class="string">"K2"</span>,</span><br><span class="line">      <span class="attr">"OU"</span>: <span class="string">"System"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"ca"</span>: &#123;</span><br><span class="line">    <span class="attr">"expiry"</span>: <span class="string">"876000h"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="生成-CA-证书和私钥"><a href="#生成-CA-证书和私钥" class="headerlink" title="生成 CA 证书和私钥"></a>生成 CA 证书和私钥</h2><p><code>cfssl gencert -initca ca-csr.json | cfssljson -bare ca</code></p><p>这样就生成了<code>ca.csr、ca-key.pem、ca.pem</code></p><h1 id="创建k8s-secret"><a href="#创建k8s-secret" class="headerlink" title="创建k8s secret"></a>创建k8s secret</h1><p>有了ca文件，我们就可以创建k8s的secret了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret tls ca-secret </span><br><span class="line">-n kube-system </span><br><span class="line">--cert=ca.pem </span><br><span class="line">--key=ca-key.pem</span><br></pre></td></tr></table></figure></p><p>创建cert-manager ca issuer<br>创建完了secret，我们再来创建<code>CA Issuer</code>就可以了：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span> <span class="string">| kubectl create -f -</span></span><br><span class="line"><span class="string"></span><span class="attr">apiVersion:</span> <span class="string">certmanager.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">ca-issuer</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  ca:</span></span><br><span class="line"><span class="attr">    secretName:</span> <span class="string">ca-secret</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;cert-manager在k8s平台中用的越来越广泛了，通过它可以更方便的管理https证书，可以&lt;code&gt;自动生成secret、自动续签
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://lusyoe.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>基于Kubernetes的Gitlab自动定时备份</title>
    <link href="https://lusyoe.github.io/2019/06/22/%E5%9F%BA%E4%BA%8EKubernetes%E7%9A%84Gitlab%E8%87%AA%E5%8A%A8%E5%AE%9A%E6%97%B6%E5%A4%87%E4%BB%BD/"/>
    <id>https://lusyoe.github.io/2019/06/22/基于Kubernetes的Gitlab自动定时备份/</id>
    <published>2019-06-22T13:18:01.000Z</published>
    <updated>2019-06-22T13:21:33.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Gitlab目前还不支持自定备份配置，当我们使用传统的apt、yum等方式安装Gitlab后，一般都是通过<code>shell脚本+crontab</code>来自动备份了。但是当Gitlab容器化以后这种传统的方式就不太适合了。这里记录一下通过Kubernetes原生的<code>CronJob</code>来自动备份。</p><h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>在开始之前需要有一套Kubernetes集群</p><h1 id="创建ConfigMap"><a href="#创建ConfigMap" class="headerlink" title="创建ConfigMap"></a>创建ConfigMap</h1><p>创建好集群后，可以将kubeconfig文件写入到 <strong>ConfigMap</strong> 中，默认kubeconfig生成在<code>$HOME/.kube/config</code>。 我这里HOME目录默认就是/root/。下面开始创建ConfigMap。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">configmap</span> <span class="string">kubeconfig</span> <span class="string">\</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">-from-file=/root/.kube/config</span></span><br></pre></td></tr></table></figure><h1 id="创建CronJob"><a href="#创建CronJob" class="headerlink" title="创建CronJob"></a>创建CronJob</h1><p>上面之所以要先创建ConfigMap就是因为这里需要引用。否则在POD中无法执行kubectl命令的。下面再来创建CronJob。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">gitlab-backup-schedule</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  schedule:</span> <span class="string">"0 1 * * *"</span></span><br><span class="line"><span class="attr">  successfulJobsHistoryLimit:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">  failedJobsHistoryLimit:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  jobTemplate:</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      template:</span></span><br><span class="line"><span class="attr">        spec:</span></span><br><span class="line"><span class="attr">          volumes:</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">            configMap:</span></span><br><span class="line"><span class="attr">              name:</span> <span class="string">kubeconfig</span></span><br><span class="line"><span class="attr">          containers:</span></span><br><span class="line"><span class="attr">          - name:</span> <span class="string">gitlab-backup</span></span><br><span class="line"><span class="attr">            image:</span> <span class="string">lachlanevenson/k8s-kubectl:v1.10.11</span></span><br><span class="line"><span class="attr">            volumeMounts:</span></span><br><span class="line"><span class="attr">            - name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">              mountPath:</span> <span class="string">/etc/kubeconfig</span></span><br><span class="line"><span class="attr">            command:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">/bin/sh</span></span><br><span class="line"><span class="bullet">            -</span> <span class="bullet">-c</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">pod_name=$(kubectl</span> <span class="string">get</span> <span class="string">pods</span> <span class="bullet">-l</span> <span class="string">app=git-gitlab-ce</span> <span class="bullet">-o</span> <span class="string">jsonpath='&#123;.items[*].metadata.name&#125;'</span> <span class="bullet">--kubeconfig=/etc/kubeconfig/config);</span></span><br><span class="line">              <span class="string">kubectl</span> <span class="string">get</span> <span class="string">po/$pod_name</span> <span class="bullet">--kubeconfig=/etc/kubeconfig/config;</span></span><br><span class="line">              <span class="string">kubectl</span> <span class="bullet">--kubeconfig=/etc/kubeconfig/config</span> <span class="string">exec</span> <span class="string">$pod_name</span> <span class="bullet">--</span> <span class="string">gitlab-rake</span> <span class="attr">gitlab:backup:create</span></span><br><span class="line"><span class="attr">          restartPolicy:</span> <span class="string">OnFailure</span></span><br></pre></td></tr></table></figure></p><p>这里设置了每天晚上1点开始备份，需要注意的是这里获取pod_name变量，是根据kubectl命令通过标签<code>app=git-gitlab-ce</code>来过滤的，这里需要根据实际的情况来。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>执行完上面的Job后，当达到定时的时间就会在Gitlab的备份目录中查看到备份的文件，默认Gitlab备份目录是在<code>/var/opt/gitlab/backups</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Gitlab目前还不支持自定备份配置，当我们使用传统的apt、yum等方式安装Gitlab后，一般都是通过&lt;code&gt;shell脚本+cro
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://lusyoe.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>调整SyntaxHighlighter Evolved代码高亮间距</title>
    <link href="https://lusyoe.github.io/2019/06/22/%E8%B0%83%E6%95%B4SyntaxHighlighter-Evolved%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E9%97%B4%E8%B7%9D/"/>
    <id>https://lusyoe.github.io/2019/06/22/调整SyntaxHighlighter-Evolved代码高亮间距/</id>
    <published>2019-06-22T13:07:38.000Z</published>
    <updated>2019-06-22T13:16:06.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近图新鲜新搭建了一个Wordpress博客，试用了不少代码高亮的插件，最后还是选择了<code>SyntaxHighlighter Evolved</code>。因为它对wordpress的<code>block</code>支持的比较好，但是在使用的过程中发现，高亮的代码上下左右<code>间距太紧密</code>了。</p><h1 id="在这之前"><a href="#在这之前" class="headerlink" title="在这之前"></a>在这之前</h1><p>先看一下优化调整之前的效果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/wp-SyntaxHighlighter-before.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h1 id="在这之后"><a href="#在这之后" class="headerlink" title="在这之后"></a>在这之后</h1><p>再来看一下调整之后的效果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/wp-SyntaxHighlighter-after.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><p>可以很明显的就好看了很多，上下以及左边的间距都加大了一些。</p><h1 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h1><p>好了，最后再来说一下如何调整，找到wordpress插件源码文件：</p><p><code>wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.syntaxhighlighter</span> <span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">float</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">left</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.1em</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: visible <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">position</span>: static <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">right</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">top</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Monaco, <span class="string">"Consolas"</span>, <span class="string">"Bitstream Vera Sans Mono"</span>, <span class="string">"Courier New"</span>, Courier, monospace <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span> <span class="meta">!important</span>;</span><br></pre></td></tr></table></figure><p>主要是修改<code>left</code>和<code>line-height</code>属性，修改之后：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">left</span>: 0<span class="selector-class">.5em</span> !<span class="selector-tag">important</span>;</span><br><span class="line"><span class="selector-tag">line-height</span>: 1<span class="selector-class">.51em</span> !<span class="selector-tag">important</span>;</span><br></pre></td></tr></table></figure></p><p>最后保存该文件即可，当然也可以调整为适合自己的样式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近图新鲜新搭建了一个Wordpress博客，试用了不少代码高亮的插件，最后还是选择了&lt;code&gt;SyntaxHighlighter Evo
      
    
    </summary>
    
    
      <category term="Wordpress" scheme="https://lusyoe.github.io/tags/Wordpress/"/>
    
  </entry>
  
  <entry>
    <title>解决harbor+cert-manager出现ingress-nginx x509: certificate is valid for ingress.local</title>
    <link href="https://lusyoe.github.io/2019/06/22/%E8%A7%A3%E5%86%B3harbor-cert-manager%E5%87%BA%E7%8E%B0ingress-nginx-x509-certificate-is-valid-for-ingress-local/"/>
    <id>https://lusyoe.github.io/2019/06/22/解决harbor-cert-manager出现ingress-nginx-x509-certificate-is-valid-for-ingress-local/</id>
    <published>2019-06-22T12:57:42.000Z</published>
    <updated>2019-06-22T13:08:37.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在通过上一篇<a href="/2019/06/22/结合Cert-Manager完成Harbor的Https证书自动签发/" title="结合Cert-Manager完成Harbor的Https证书自动签发">结合Cert-Manager完成Harbor的Https证书自动签发</a> 文章，<br>部署好 <strong>Harbor</strong> 后，执行<code>docker login</code>出现了，如下错误：</p><p><code>ingress-nginx x509: certificate is valid for ingress.local, not harbor.lusyoe.com</code></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>后来中间也是找了各种方法尝试，一开始还以为是<code>cert-manager</code>的问题，最后才无意中发现其实是<code>nginx-ingress-controller</code>的问题。<br>当默认没有指定<code>nginx-ingress-controller</code>使用的证书时，它使用的就是<code>ingress.local</code>。 修改nginx-ingress-controller的<code>values.yaml</code>配置文件，添加额外的参数即可，如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extraArgs:</span></span><br><span class="line"><span class="attr">  default-ssl-certificate:</span> <span class="string">default/harbor-secret-tls</span></span><br></pre></td></tr></table></figure></p><p>最后再通过docker登录就不会出现证书问题了。</p><p><code>docker login harbor.lusyoe.com</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;在通过上一篇&lt;a href=&quot;/2019/06/22/结合Cert-Manager完成Harbor的Https证书自动签发/&quot; title=
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://lusyoe.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>结合Cert-Manager完成Harbor的Https证书自动签发</title>
    <link href="https://lusyoe.github.io/2019/06/22/%E7%BB%93%E5%90%88Cert-Manager%E5%AE%8C%E6%88%90Harbor%E7%9A%84Https%E8%AF%81%E4%B9%A6%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91/"/>
    <id>https://lusyoe.github.io/2019/06/22/结合Cert-Manager完成Harbor的Https证书自动签发/</id>
    <published>2019-06-22T12:50:25.000Z</published>
    <updated>2019-06-22T12:57:03.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用Harbor一般建议都加上Https，但是Https配置也是一个麻烦，这里主要记录一下如何快速通过cert-manager来自动签发证书。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Kubernetes v1.10.11</li><li>Harbor v1.7.0</li><li>Nginx-ingress-controller v0.21.0</li><li>Helm v2.11.0<br>这里Harbor采用helm chart的形式部署在k8s集群上。 nginx-ingress-controller采用<code>Deployment+NodePort</code>暴露80和443。 如果集群内NodePort端口限制了不能使用80和443，那么也可以采用<code>DaemonSet+hostNetwork</code>来进行负载均衡。</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>k8s集群、nginx-ingress-controller还有helm的安装这里就不细说了，基本上是基础集群必有的。<br>推荐一个快速搭建部署的项目：kubeasz</p><h2 id="安装Cert-Manager"><a href="#安装Cert-Manager" class="headerlink" title="安装Cert-Manager"></a>安装Cert-Manager</h2><p>直接从官方的chart仓库进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">helm install --name cert-manager --namespace kube-system \</span><br><span class="line">  --<span class="built_in">set</span> ingressShim.defaultIssuerName=letsencrypt-prod \</span><br><span class="line">  --<span class="built_in">set</span> ingressShim.defaultIssuerKind=ClusterIssuer stable/cert-manager</span><br></pre></td></tr></table></figure><p>这里指定自动签发 <strong>letsencrypt-prod</strong> 的<code>Issuer</code>，并且默认使用<code>ClusterIsser</code>。</p><h2 id="创建ClusterIssuer"><a href="#创建ClusterIssuer" class="headerlink" title="创建ClusterIssuer"></a>创建ClusterIssuer</h2><p>创建文件：<code>cluster-issuer.yaml</code>，内容如下：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">certmanager.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  acme:</span></span><br><span class="line"><span class="attr">    server:</span> <span class="attr">https://acme-v02.api.letsencrypt.org/directory</span></span><br><span class="line"><span class="attr">    email:</span> <span class="string">lusyoe@163.com</span></span><br><span class="line"><span class="attr">    privateKeySecretRef:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line"><span class="attr">    http01:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><code>kubectl apply -f cluster-issuer.yaml</code></p><p>这样Cert-Manager就已经安装配置好了。</p><h1 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h1><p>下载官方项目源码：<code>https://github.com/goharbor/harbor-helm/releases</code><br>master分支是开发分支，建议下载1.0.0的Release源码。</p><p>修改<code>values.yaml</code><br>源码下载好后，修改项目目录中的values.yaml文件。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">ingress</span></span><br><span class="line"><span class="attr">  tls:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line">   <span class="comment"># 这里可以随意填写一个，cert-manager会自动创建并挂载</span></span><br><span class="line"><span class="attr">    secretName:</span> <span class="string">"harbor-secret-tls"</span></span><br><span class="line"><span class="attr">    notarySecretName:</span> <span class="string">"notary-secret-tls"</span></span><br><span class="line"><span class="attr">    commonName:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">  ingress:</span></span><br><span class="line"><span class="attr">    hosts:</span></span><br><span class="line"><span class="attr">      core:</span> <span class="string">harbor.lusyoe.com</span></span><br><span class="line"><span class="attr">      notary:</span> <span class="string">notary.lusyoe.com</span></span><br><span class="line"><span class="attr">    annotations:</span></span><br><span class="line">      <span class="string">ingress.kubernetes.io/ssl-redirect:</span> <span class="string">"true"</span></span><br><span class="line">      <span class="string">nginx.ingress.kubernetes.io/ssl-redirect:</span> <span class="string">"true"</span></span><br><span class="line">      <span class="string">ingress.kubernetes.io/proxy-body-size:</span> <span class="string">"0"</span></span><br><span class="line">      <span class="string">nginx.ingress.kubernetes.io/proxy-body-size:</span> <span class="string">"0"</span></span><br><span class="line">      <span class="comment"># 这里添加自动创建tls，并使用的issuer</span></span><br><span class="line">      <span class="string">kubernetes.io/tls-acme:</span> <span class="string">"true"</span></span><br><span class="line">      <span class="string">certmanager.k8s.io/issuer:</span> <span class="string">letsencrypt-prod</span></span><br></pre></td></tr></table></figure></p><h1 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h1><p>这里没有修改其他的配置，正式的生产环境最好还是要做数据持久化配置的哦。<br>其中包含了很多的组件，也可以适当的启用和禁用。<br>进入到harbor源码目录，执行以下命令进行安装：<br><code>helm install --name harbor .</code></p><p>通过cert-manager自动签发的证书，将会挂载到pod的<code>/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</code></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>最后我们就可以通过浏览器访问：<a href="https://harbor.lusyoe.com" target="_blank" rel="noopener">https://harbor.lusyoe.com</a> 就可以了。<br>后面有空再介绍使用手动自签的证书完成Harbor的Https。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用Harbor一般建议都加上Https，但是Https配置也是一个麻烦，这里主要记录一下如何快速通过cert-manager来自动签发证书
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://lusyoe.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud Platform创建VM实例允许root登录</title>
    <link href="https://lusyoe.github.io/2019/06/22/Google-Cloud-Platform%E5%88%9B%E5%BB%BAVM%E5%AE%9E%E4%BE%8B%E5%85%81%E8%AE%B8root%E7%99%BB%E5%BD%95/"/>
    <id>https://lusyoe.github.io/2019/06/22/Google-Cloud-Platform创建VM实例允许root登录/</id>
    <published>2019-06-22T12:41:19.000Z</published>
    <updated>2019-06-22T12:45:41.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近才刚开始使用GCP，发现一个很不方便的地方，每次创建好VM默认都不允许root账号登录。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>创建CentOS VM时，下拉展开Management，找到<code>Automation—&gt;Startup script</code>。<br>在输入框中填入以下内容即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/PermitRootLogin no/PermitRootLogin yes/g'</span> /etc/ssh/sshd_config</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;最近才刚开始使用GCP，发现一个很不方便的地方，每次创建好VM默认都不允许root账号登录。&lt;/p&gt;
&lt;h1 id=&quot;解决&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="Cloud" scheme="https://lusyoe.github.io/tags/Cloud/"/>
    
  </entry>
  
  <entry>
    <title>2017年回顾总结</title>
    <link href="https://lusyoe.github.io/2018/02/28/2017%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>https://lusyoe.github.io/2018/02/28/2017年总结/</id>
    <published>2018-02-28T12:26:21.000Z</published>
    <updated>2019-04-07T14:27:39.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>现在已经是2月28号了，刚过完春节假期，回到岗位。<br>节后综合征也是难免的，所以就写写去年的总结吧。</p><h1 id="时间跨度"><a href="#时间跨度" class="headerlink" title="时间跨度"></a>时间跨度</h1><h2 id="年初"><a href="#年初" class="headerlink" title="年初"></a>年初</h2><p>2017年初还在深圳科陆上班，维护着老掉牙的项目。项目技术上面用是struts2+hibernate+osgi<br>那时候正值Spring boot/cloud 微服务浪潮达到如日中天的地步，作为技术人员怎么可能不向往，不去追求呢。<br>于是在年初的时候就毅然决然的离职跳槽了，虽然在这也没做多久，但还是已经知道了这里并不适合我。<br>长痛不如短痛吧。</p><h2 id="年中"><a href="#年中" class="headerlink" title="年中"></a>年中</h2><p>经过年初的跳槽，到了infosys就职。果不其然，用起了之前一直向往的，Spring Boot/Cloud以及Hadoop大数据相关的各种时髦框架技术。<br>一度认为自己没选错方向，虽然新的东西要学很多，即使回到家通宵着学习研究也是甘之如饴。<br>然而美好的时光总是短暂的，一个小项目结束后，就被释放了。<br>坐了长达1个月的冷板凳，最后虽然又可以加入新的项目组了，然而我也早就心灰意冷了。<br>在进入新项目组之前毅然决然的离职，一口气从深圳跑到杭州，并且对技术产生了动摇，不想走技术方向了。</p><p>在杭州，7月份新入职的一家中型公司，虽然是以技术高级开发工程师入职的，但是在1个月后被领导委以重任，初次担任了开发经理的职位。<br>这让我很是开心，于是就决定开始边学习边实践管理能力了。</p><p>在这段时间里，我又是开始废寝忘食的工作学习，几乎达到996标准了。凡事总是从公司的角度考虑问题，摆脱了之前只顾自己的狭隘思想。</p><h2 id="年底"><a href="#年底" class="headerlink" title="年底"></a>年底</h2><p>然而又再一次证明的美好的时光总是短暂的，到了年底的时候，由于领导接到一个比较重视的项目。<br>由于人力的原因，就把我抽调到这个项目中了，虽然是说作为主程核心开发人员，不也就是又掉回原来的普通开发人员了吗。<br>也是这个项目涉及的又非常广，几乎要跟公司内所有产品打交道，我作为一个半新人，肯定不会再让我担任开发经理的。<br>这个我能理解，于是角色的调整又花了一些时间，并且在这段时间内又跟新的开发经理闹起矛盾了。</p><p>这又让我升起了走人念头，考虑到这次入职还太短了，贸然这样频繁跳不太好，最终还是坚持做下去了。</p><h1 id="技术领域"><a href="#技术领域" class="headerlink" title="技术领域"></a>技术领域</h1><h2 id="Spring家族"><a href="#Spring家族" class="headerlink" title="Spring家族"></a>Spring家族</h2><p>今年主要是学到了Spring boot/cloud等等Spring系列的技术框架，深入的理解到Spring的核心Ioc和Aop。<br>并且年初的时候在科陆还自己手写了一个微型基于注解Ioc容器。<br>在infosys的那个新项目也是完全基于Spring boot/cloud的微服务架构，算是实战经验吧。<br>在下半年优云的时候Aop又是深度使用了一下，在KB知识库项目中，利用到Aop进行统一异常处理、审计日志、国际化、权限控制。<br>未来还有缓存控制、事务控制、性能监控、分布式追踪都可以使用Aop进行实现。代码优雅、层次解耦非常棒。</p><h2 id="Hadoop大数据系列"><a href="#Hadoop大数据系列" class="headerlink" title="Hadoop大数据系列"></a>Hadoop大数据系列</h2><p>Hadoop大数据主要是上半年infosys的那个项目中用到了，其项目本身就是为了大数据抽取存储的。</p><ul><li>hadoop作为大数据存储仓库，用于存储抽取自各个DB的数据。 </li><li>Sqoop用于抽取DB数据的组件。</li><li>Oozie用于抽取的周期调度组件。 </li><li>Hive用于查询Hadoop上面的数据的，类似数据库SQL。</li></ul><h2 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h2><p>之前就听说过dubbo，据说在互联网企业中用的比较多，在年中入职优云后。果然全公司产品都在用这个，自然现在也是用的滚熟啦。<br>不过还是不太喜欢以zookeeper为注册中心的服务，zookeeper太不稳定了经常出问题。<br>还有就是序列化和超时的问题也踩过几次坑。<br>初次遇见直接通过dubbox来提供rest服务，算是告别了之前的tomcat、jetty等web容器了。</p><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>持续集成这个应该也算是技术领域吧，今年算是把Jenkins彻底玩起来了。<br>尤其是Pipeline，真的是非常棒的东西，完全自动化，改变了以前的开发测试模式。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><p>虽然早在2015年docker还没那么火的时候就开始接触了，但是到今年才算是真正利用起来了。<br>将其结合在Jenkins持续流程中也是非常赞的。不过唯一的遗憾是没有运用上k8s，这个容器调度也是近2年火起来的。<br>早在2015年那时候还没有这东西呢。</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>现在还有什么web项目没有用上Redis嘛，缓存是必须的。除了缓存成json以外，还学习到了pub/sub订阅模式。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>暂时就先写这么多吧，其实这一年中最大的收获还是初次接触到了管理方面了。<br>以前一直只是一个普通员工是视角，现在不在是个人单独作战了，要为团队负责！<br>后面有时间再写一篇管理的收获吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h1&gt;&lt;p&gt;现在已经是2月28号了，刚过完春节假期，回到岗位。&lt;br&gt;节后综合征也是难免的，所以就写写去年的总结吧。&lt;/p&gt;
&lt;h1 id=&quot;时间跨度&quot;
      
    
    </summary>
    
      <category term="总结" scheme="https://lusyoe.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="总结" scheme="https://lusyoe.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>心态的变化</title>
    <link href="https://lusyoe.github.io/2017/09/30/%E5%BF%83%E6%80%81%E7%9A%84%E5%8F%98%E5%8C%96/"/>
    <id>https://lusyoe.github.io/2017/09/30/心态的变化/</id>
    <published>2017-09-30T13:51:59.000Z</published>
    <updated>2019-04-07T14:27:39.177Z</updated>
    
    <content type="html"><![CDATA[<p>随便写写</p><h1 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h1><p>回顾迈入IT编程界的时间其实不长，也不算短了，3年左右。<br>从一开始的感兴趣，到中间的痴迷技术，再到后来深深地感觉到技术的无涯。<br>心态可以说是波澜起伏，也算是见证了我的青春吧。</p><p>是的，最美好的青春时光里，没有去谈一场轰烈的恋爱，也没有做出什么惊天动地的”大事”。<br>有的，只是电脑、书籍与代码。</p><p>曾经在读书的时代，可以说是最讨厌看学习的书了，只喜欢网络小说。</p><p>然而就是这么短短的2年多时间里，看的技术书才是最多的。</p><h1 id="IT职业生涯"><a href="#IT职业生涯" class="headerlink" title="IT职业生涯"></a>IT职业生涯</h1><p>在去年8月底其实也写过一篇<a href="http://lusyoe.github.io/2016/08/20/%E5%9B%9E%E9%A6%96%E6%84%9F%E6%82%9F/">回首感悟</a>，这里再继续记录一下这一年来发生的事情吧。</p><h2 id="2016年12月正式对Android挥手"><a href="#2016年12月正式对Android挥手" class="headerlink" title="2016年12月正式对Android挥手"></a>2016年12月正式对Android挥手</h2><p>2016年12月5号从TCL那里离职，宣告着我已经打算好了正式离开Android领域，这是早有预料的事。<br>之后却是进入了一家做java web的外包公司，当时只想着多学习，攒点经验就立马跳。<br>果不其然，在那里只待了短短2个月不到，就再次跳槽了。因为本来目标不是java web，而是大数据。</p><h2 id="2017年2月初识大数据"><a href="#2017年2月初识大数据" class="headerlink" title="2017年2月初识大数据"></a>2017年2月初识大数据</h2><p>从那家外包公司出来后，又进入了一家外企infosys，印度比较有名的外包公司。当时做的是华为的外包，为什么我又会进一家外包公司呢，因为可以接触到大数据相关东西，还是为了学习。<br>事实上在那我也的确接触到了大数据的知识，从之前的理论到现在的实践。虽然对于大数据还只是接触的一点皮毛，但却是让我深深的感觉到了后面路程的遥远，不禁生出了绝望之感。</p><p>在那里待了4个月后，又开始思考人生道路，感觉又一次走到人生的十字路口了，上一次给我印象深刻的就是在毕业的时候，转行阶段了。</p><p>这一次也不例外，我是确定还要一直往技术方向走呢？还是换个管理方向？现在已经是高级工程师了，再往上就是架构师，差不多就到顶了。后面也只是在不断的积累经验而已。眼看着天花板就在眼前，思虑再三，还是决定转向管理了。</p><p>一方面是不甘心一辈子只做个技术工；<br>另一个是早在转行的时候，其实就有一个理想了，现在是要逐步向其靠拢了。</p><h2 id="2017年9月-管理之始"><a href="#2017年9月-管理之始" class="headerlink" title="2017年9月 管理之始"></a>2017年9月 管理之始</h2><p>2017年7月从深圳来到杭州，其实在去年的时候就有想过去杭州的，本来是打算2017年底再来的。<br>由于种种原因，所以提前了大概半年左右。</p><p>因为进来时是高级开发工程师，但是在转正时，却被公司正式任命为项目经理，其实我是有点不敢相信的。<br>本来按计划是明年才可能会开始带团队，现在提前了这么多，肯定也要付出更多的努力啦。</p><p>这里可能跟我在入职的时候填的职业发展规划有关，果然在做任何事情之前必须要有个计划，这样机会才能更好的抓住啊。</p><h1 id="心态的变化"><a href="#心态的变化" class="headerlink" title="心态的变化"></a>心态的变化</h1><p>回到主题，从程序员到项目经理的转变，可以说是非常大的。一开始也是不太适应。<br>目前仍然还是在调整阶段，只能多看看前辈们的经验，多多学习吧。</p><p>管理是一门较深的艺术。不比技术，一个人慢慢学就好。<br>管理的提升是至少一个团队的提升，要逐渐把个人的影响力降低。<br>团队人员一旦超出3人，就不是那么好管理的了，人心这块还需要多多学习揣摩。</p><p>个人没有那么高的魅力，普普通通的一个人只能靠自己的努力，付出才能得到回报。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>目前只是一个小小的项目管理而已，切记不可忘形。要始终牢记自己的当前目标：<br>1、把控项目进度；<br>2、提高项目质量；<br>3、做好团队建设。</p><p>在大的方向之下，就是平时还要多观察组员的一些心理状态，熟悉人心把控。<br>该强硬的地方就要强硬，该妥协的地方也不要死倔着。</p><p>随记暂时就这么多吧，后面管理的漫长道路还在等着我，迎接更美好的明天吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随便写写&lt;/p&gt;
&lt;h1 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h1&gt;&lt;p&gt;回顾迈入IT编程界的时间其实不长，也不算短了，3年左右。&lt;br&gt;从一开始的感兴趣，到中间的痴迷技术，再到后来深深地感
      
    
    </summary>
    
      <category term="生活" scheme="https://lusyoe.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://lusyoe.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="总结" scheme="https://lusyoe.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2017.8浙江旅游回顾</title>
    <link href="https://lusyoe.github.io/2017/08/16/2017-8%E6%B5%99%E6%B1%9F%E6%97%85%E6%B8%B8%E5%9B%9E%E9%A1%BE/"/>
    <id>https://lusyoe.github.io/2017/08/16/2017-8浙江旅游回顾/</id>
    <published>2017-08-16T13:38:15.000Z</published>
    <updated>2019-04-07T14:27:39.173Z</updated>
    
    <content type="html"><![CDATA[<p>说起来真的很可笑。这一次旅游真的很失败，同时也算是让我认识到了吧。<br>其实我和之前喜欢妹纸并不合适。<br>之前为了这次旅游，差不多大半个月没有休息，周末也天天跑去加班。<br>结果呢，旅游过程中相处的并不愉快。这里既有我的原因，也有她的原因吧。</p><p>我那几天没有提前做好攻略，导致每次坐车行程总是出错。</p><h1 id="西湖"><a href="#西湖" class="headerlink" title="西湖"></a>西湖</h1><p>第一天8.12号星期六，一大早去车站接到妹纸。然后下午去西湖，没有做好攻略的直接结果就是带着妹纸瞎跑了差不多一下午的时间。本来是应该直接去断桥西湖边的，结果傍晚才到。。<br>逛完了西湖的断桥，后面又准备去雷峰塔，这次是没找错地方，但是无攻略时间上面没有做好计划。<br>导致到了雷锋塔，但是刚好超过了开放时间，晚上19：30后就不能进入了，就差那么几分钟。很扫兴。。</p><h1 id="舟山"><a href="#舟山" class="headerlink" title="舟山"></a>舟山</h1><p>第二天，8.13号星期天，又是一大早就准备赶车从杭州到舟山去，因为没有提前做好准备，脑袋没有仔细思考，居然想到要去只有一趟班车的车站去坐车。。幸好有妹纸提醒，才去的黄龙集散中心那个站。虽然远一点但是比较保险啊。每隔20分钟就有一班。而我之前居然就为了近那么10几分钟的公交路线，要跑去什么杭州汽车客运中心。。</p><p>经过了之前一连串的失误，我现在是快丧失理智思考了，妹纸也是对我很失望。。<br>在客车上讨论在舟山哪一个站下比较好，又出现了分歧了。因为在舟山分别有3个车站：定海、新城、普陀。<br>她开始是说在定海站下，但是这里我前面有看攻略大都是说最好在普陀站下比较好，但是由于之前的种种失误，我对自己也是没有信心了，于是就完全听她的了，幸好她后来又决定了在普陀站下。。。</p><h2 id="东沙海滩"><a href="#东沙海滩" class="headerlink" title="东沙海滩"></a>东沙海滩</h2><p>这次又是没有提前做好攻略计划安排，到了那里结果又是错过开放时间了，只能等半个多小时，然后再买夜间的门票。幸好的是没有去南沙海滩，听说那里也就多一个沙雕，门票却是贵了3倍。。</p><h2 id="普陀"><a href="#普陀" class="headerlink" title="普陀"></a>普陀</h2><p>第三天，8.14号星期一，也是来到舟山的第二天就直接准备去普陀山了，要到普陀景区就必须要坐船了。<br>结果我又一次吃到没有准备充分的亏了，去坐船我居然建议去只有一班的朱家尖码头，而更远一点的半升洞码头又非常多的班次就那样被我无视了。。后来又是妹纸建议去的半升洞码头。</p><h1 id="乌镇"><a href="#乌镇" class="headerlink" title="乌镇"></a>乌镇</h1><p>第四天，8.15号星期二。早上出发妹纸建议就直接去乌镇了。这里也怪了我做好计划和攻略，居然不知道可以在舟山就自己去乌镇的。。到了乌镇，正值最炎热的下午时候，只好休息一下，等到晚上再去乌镇西栅景区啦。这里我又为了省那点钱没有买观光旅游船票，导致一路走好长的路，虽然乌镇的街道还是挺不错的。但是也错过了乌镇船上风光啦。免费的那个大船太没意思。</p><h1 id="返程"><a href="#返程" class="headerlink" title="返程"></a>返程</h1><p>结果也就是在乌镇玩了一晚上而已。第五天，8.16号星期三就回杭州了，算是结束这次旅游啦。<br>当然妹纸又决定到上海去玩一圈了，而我因为哥哥也来杭州了，不得不陪一下他了。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>对于妹纸来说这仅仅只是一次旅程而已，对于我来说呢。也算是真正知道了自己还是太嫩了点，我和她也基本上是没什么戏的，我们不适合啊。<br>这一篇就是作为检讨的，清楚的认识到自己不足，脸皮不够厚，事情想象的不够多，处理事情也不够好。<br>还是缺乏这种经验和经历。以后还是需要再多多锻炼一下自己啊。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说起来真的很可笑。这一次旅游真的很失败，同时也算是让我认识到了吧。&lt;br&gt;其实我和之前喜欢妹纸并不合适。&lt;br&gt;之前为了这次旅游，差不多大半个月没有休息，周末也天天跑去加班。&lt;br&gt;结果呢，旅游过程中相处的并不愉快。这里既有我的原因，也有她的原因吧。&lt;/p&gt;
&lt;p&gt;我那几天
      
    
    </summary>
    
      <category term="生活" scheme="https://lusyoe.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://lusyoe.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="旅游" scheme="https://lusyoe.github.io/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>2017重新出发</title>
    <link href="https://lusyoe.github.io/2017/07/28/2017%E9%87%8D%E6%96%B0%E5%87%BA%E5%8F%91/"/>
    <id>https://lusyoe.github.io/2017/07/28/2017重新出发/</id>
    <published>2017-07-28T13:05:36.000Z</published>
    <updated>2019-04-07T14:27:39.168Z</updated>
    
    <content type="html"><![CDATA[<p>2017年重新出发！今天偶尔打开Github发现pages这个仓库有10个月没更新提交了。<br>之前那段时间不是没有写blog，只是都是在<a href="http://blog.csdn.net/lusyoe" target="_blank" rel="noopener">CSDN</a>上面写的。<br>还记得去年的这个时候在深圳TCL因为无法连接外网，只能访问有限的blog网站。<br>迫不得已只能将blog都写在csdn了。。</p><p>晃眼间从深圳来到杭州了，目前这家公司感觉还行。只是项目处于维护状态，基本上开发的比较少。<br>最开心的是公司可以无限制的上外网，这样我又可以玩hexo，更新github pages了。</p><p>之前在CSDN上的Blog不打算再同步过来了，一方面是太多，二个也许以后又会遇到那种不能畅快上外网的情况。</p><p>github pages这个我只当是自己的一个私人空间了，不打算写一些技术Blog。<br>把那些技术blog写在CSDN也许会帮助更多的人吧。</p><p>乱七八糟的说了一些，就这样吧。<br>这里后续记录工作生活方面的事情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2017年重新出发！今天偶尔打开Github发现pages这个仓库有10个月没更新提交了。&lt;br&gt;之前那段时间不是没有写blog，只是都是在&lt;a href=&quot;http://blog.csdn.net/lusyoe&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
      <category term="生活" scheme="https://lusyoe.github.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="https://lusyoe.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>解决Jenkins+Gitlab出现的Permission denied权限问题</title>
    <link href="https://lusyoe.github.io/2016/10/11/%E8%A7%A3%E5%86%B3Jenkins-Gitlab%E5%87%BA%E7%8E%B0%E7%9A%84Permission-denied%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98/"/>
    <id>https://lusyoe.github.io/2016/10/11/解决Jenkins-Gitlab出现的Permission-denied权限问题/</id>
    <published>2016-10-11T00:02:40.000Z</published>
    <updated>2019-04-07T14:27:39.182Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Jenkins构建拉取Gitlab上的仓库时总是出现权限失败，无法访问的情况，如打印以下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Started by user lhy</span><br><span class="line">Building in workspace /usr/share/tomcat8/.jenkins/workspace/zxpm</span><br><span class="line"> &gt; git rev-parse --is-inside-work-tree # timeout=10</span><br><span class="line">Fetching changes from the remote Git repository</span><br><span class="line"> &gt; git config remote.origin.url git@192.168.1.2:web/zxpm.git # timeout=10</span><br><span class="line">Fetching upstream changes from git@192.168.1.2:web/zxpm.git</span><br><span class="line"> &gt; git --version # timeout=10</span><br><span class="line">using GIT_SSH to set credentials </span><br><span class="line"> &gt; git -c core.askpass=true fetch --tags --progress git@192.168.1.2:web/zxpm.git +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">ERROR: Error fetching remote repo &apos;origin&apos;</span><br><span class="line">hudson.plugins.git.GitException: Failed to fetch from git@192.168.1.2:web/zxpm.git</span><br><span class="line">at hudson.plugins.git.GitSCM.fetchFrom(GitSCM.java:799)</span><br><span class="line">at hudson.plugins.git.GitSCM.retrieveChanges(GitSCM.java:1055)</span><br><span class="line">at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1086)</span><br><span class="line">at hudson.scm.SCM.checkout(SCM.java:485)</span><br><span class="line">at hudson.model.AbstractProject.checkout(AbstractProject.java:1269)</span><br><span class="line">at hudson.model.AbstractBuild$AbstractBuildExecution.defaultCheckout(AbstractBuild.java:604)</span><br><span class="line">at jenkins.scm.SCMCheckoutStrategy.checkout(SCMCheckoutStrategy.java:86)</span><br><span class="line">at hudson.model.AbstractBuild$AbstractBuildExecution.run(AbstractBuild.java:529)</span><br><span class="line">at hudson.model.Run.execute(Run.java:1741)</span><br><span class="line">at hudson.maven.MavenModuleSetBuild.run(MavenModuleSetBuild.java:531)</span><br><span class="line">at hudson.model.ResourceController.execute(ResourceController.java:98)</span><br><span class="line">at hudson.model.Executor.run(Executor.java:410)</span><br><span class="line">Caused by: hudson.plugins.git.GitException: Command &quot;git -c core.askpass=true fetch --tags --progress git@192.168.1.2:web/zxpm.git +refs/heads/*:refs/remotes/origin/*&quot; returned status code 128:</span><br><span class="line">stdout: </span><br><span class="line">stderr: Permission denied, please try again.</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">Permission denied (publickey,password).</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br><span class="line"></span><br><span class="line">at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandIn(CliGitAPIImpl.java:1740)</span><br><span class="line">at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.launchCommandWithCredentials(CliGitAPIImpl.java:1476)</span><br><span class="line">at org.jenkinsci.plugins.gitclient.CliGitAPIImpl.access$300(CliGitAPIImpl.java:63)</span><br><span class="line">at org.jenkinsci.plugins.gitclient.CliGitAPIImpl$1.execute(CliGitAPIImpl.java:314)</span><br><span class="line">at hudson.plugins.git.GitSCM.fetchFrom(GitSCM.java:797)</span><br><span class="line">... 11 more</span><br><span class="line">ERROR: null</span><br><span class="line">Finished: FAILURE</span><br></pre></td></tr></table></figure></p><p>这个问题只需要细心点就可以了。配置Jenkins项目时，在源码管理中选择Git(前提是已安装好Git插件)，填好仓库地址，认证点击Add，如图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/jenkins_git.png" alt="jenkins git" title>                </div>                <div class="image-caption">jenkins git</div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/private_key.png" alt="private key" title>                </div>                <div class="image-caption">private key</div>            </figure><p>在Kind中选择<strong>SSH Username with private key</strong>，下面的Private Key选择<strong>Enter directly</strong>直接输入在<strong>Gitlab</strong>部署了public key对应的private key即可。一般public key是在<code>~/.ssh/id_rsa.pub</code>,而private key是<code>~/.ssh/id_rsa</code>。<br>点击OK，保存项目再次构建就好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用Jenkins构建拉取Gitlab上的仓库时总是出现权限失败，无法访问的情况，如打印以下信息：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="Jenkins" scheme="https://lusyoe.github.io/categories/Jenkins/"/>
    
    
      <category term="Jenkins" scheme="https://lusyoe.github.io/tags/Jenkins/"/>
    
      <category term="Gitlab" scheme="https://lusyoe.github.io/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>解决Hibernate使用HQL查询出现is not mapped问题</title>
    <link href="https://lusyoe.github.io/2016/10/07/%E8%A7%A3%E5%86%B3Hibernate%E4%BD%BF%E7%94%A8HQL%E6%9F%A5%E8%AF%A2%E5%87%BA%E7%8E%B0is-not-mapped%E9%97%AE%E9%A2%98/"/>
    <id>https://lusyoe.github.io/2016/10/07/解决Hibernate使用HQL查询出现is-not-mapped问题/</id>
    <published>2016-10-07T00:26:16.000Z</published>
    <updated>2019-04-07T14:27:39.179Z</updated>
    
    <content type="html"><![CDATA[<p>环境：Hibernate 5.1.0.Final，IntelliJ IDEA 2016.2.2</p><p>首先检查实体Bean配置一切正常，检查映射配置文件和hibernate.cfg.xml配置文件也是正常的。<br>通过搜索都说是HQL查询根据的是实体名而不是表名查找的，那个我也是对的，实在想不通会出现<strong>is not mapped</strong>问题。异常信息如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> org.hibernate.hql.internal.ast.QuerySyntaxException: UsersEntity is not mapped [FROM UsersEntity ]</span><br><span class="line">    at org.hibernate.hql.internal.ast.QuerySyntaxException.generateQueryException(QuerySyntaxException.java:<span class="number">79</span>)</span><br><span class="line">    at org.hibernate.QueryException.wrapWithQueryString(QueryException.java:<span class="number">103</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:<span class="number">218</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:<span class="number">142</span>)</span><br><span class="line">    at org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:<span class="number">115</span>)</span><br><span class="line">    at org.hibernate.engine.query.spi.HQLQueryPlan.&lt;init&gt;(HQLQueryPlan.java:<span class="number">76</span>)</span><br><span class="line">    at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:<span class="number">150</span>)</span><br><span class="line">    at org.hibernate.internal.AbstractSessionImpl.getHQLQueryPlan(AbstractSessionImpl.java:<span class="number">302</span>)</span><br><span class="line">    at org.hibernate.internal.AbstractSessionImpl.createQuery(AbstractSessionImpl.java:<span class="number">240</span>)</span><br><span class="line">    at org.hibernate.internal.SessionImpl.createQuery(SessionImpl.java:<span class="number">1907</span>)</span><br><span class="line">    at TestHibernate.main(TestHibernate.java:<span class="number">18</span>)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class="number">147</span>)</span><br><span class="line">Caused by: org.hibernate.hql.internal.ast.QuerySyntaxException: UsersEntity is not mapped</span><br><span class="line">    at org.hibernate.hql.internal.ast.util.SessionFactoryHelper.requireClassPersister(SessionFactoryHelper.java:<span class="number">171</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.tree.FromElementFactory.addFromElement(FromElementFactory.java:<span class="number">91</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.tree.FromClause.addFromElement(FromClause.java:<span class="number">79</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.HqlSqlWalker.createFromElement(HqlSqlWalker.java:<span class="number">321</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.fromElement(HqlSqlBaseWalker.java:<span class="number">3704</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.fromElementList(HqlSqlBaseWalker.java:<span class="number">3593</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.fromClause(HqlSqlBaseWalker.java:<span class="number">718</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:<span class="number">574</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:<span class="number">311</span>)</span><br><span class="line">    at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:<span class="number">259</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:<span class="number">262</span>)</span><br><span class="line">    at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:<span class="number">190</span>)</span><br><span class="line">    ... <span class="number">13</span> more</span><br></pre></td></tr></table></figure></p><p>最后仔细排查才发现是被IDE给坑了。。</p><p>我是通过IDEA自动生成的Session工厂类和映射配置文件，问题就出在IDE自动生成的那个获取Session的工厂类上。以下是IDE自动生成类的完整内容：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SessionFactory ourSessionFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ServiceRegistry serviceRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">            configuration.configure();</span><br><span class="line"></span><br><span class="line">            serviceRegistry = <span class="keyword">new</span> StandardServiceRegistryBuilder().applySettings(configuration.getProperties()).build();</span><br><span class="line">            ourSessionFactory = configuration.buildSessionFactory(serviceRegistry);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ourSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public static void main(final String[] args) throws Exception &#123;</span></span><br><span class="line"><span class="comment">        final Session session = getSession();</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            System.out.println("querying all the managed entities...");</span></span><br><span class="line"><span class="comment">            final Map metadataMap = session.getSessionFactory().getAllClassMetadata();</span></span><br><span class="line"><span class="comment">            for (Object key : metadataMap.keySet()) &#123;</span></span><br><span class="line"><span class="comment">                final ClassMetadata classMetadata = (ClassMetadata) metadataMap.get(key);</span></span><br><span class="line"><span class="comment">                final String entityName = classMetadata.getEntityName();</span></span><br><span class="line"><span class="comment">                final Query query = session.createQuery("from " + entityName);</span></span><br><span class="line"><span class="comment">                System.out.println("executing: " + query.getQueryString());</span></span><br><span class="line"><span class="comment">                for (Object o : query.list()) &#123;</span></span><br><span class="line"><span class="comment">                    System.out.println("  " + o);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125; finally &#123;</span></span><br><span class="line"><span class="comment">            session.close();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我只是简单的将main方法注释掉了，其实问题就是出在<strong>serviceRegistry</strong>上面的，只要移除掉这个就好了。<br>修改后为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SessionFactory ourSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">            configuration.configure();</span><br><span class="line"></span><br><span class="line">            ourSessionFactory = configuration.buildSessionFactory();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExceptionInInitializerError(ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> <span class="keyword">throws</span> HibernateException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ourSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为才刚开始学，具体的原因还没有进行分析，以后有时间再慢慢查找资料阅读源码分析吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;环境：Hibernate 5.1.0.Final，IntelliJ IDEA 2016.2.2&lt;/p&gt;
&lt;p&gt;首先检查实体Bean配置一切正常，检查映射配置文件和hibernate.cfg.xml配置文件也是正常的。&lt;br&gt;通过搜索都说是HQL查询根据的是实体名而不是表名查
      
    
    </summary>
    
      <category term="Hibernate" scheme="https://lusyoe.github.io/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="https://lusyoe.github.io/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate+JNDI配置</title>
    <link href="https://lusyoe.github.io/2016/10/05/Hibernate-JNDI%E9%85%8D%E7%BD%AE/"/>
    <id>https://lusyoe.github.io/2016/10/05/Hibernate-JNDI配置/</id>
    <published>2016-10-05T09:08:38.000Z</published>
    <updated>2019-04-07T14:27:39.170Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始使用JNDI，网上也查了不少资料，磕磕盼盼鼓捣了大半天才成功，在此记录一下。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>首先还是再啰嗦两句，介绍一下JNDI技术。<br>JNDI是Java 命名和目录接口（Java Naming and Directory Interface，JNDI）的简称.从一开始就一直是 JavaEE 企业的核心技术之一。在JMS，JMail,JDBC,EJB等技术中，就大量应用的这种技术。</p><h2 id="服务端容器配置-基于Tomcat"><a href="#服务端容器配置-基于Tomcat" class="headerlink" title="服务端容器配置(基于Tomcat)"></a>服务端容器配置(基于Tomcat)</h2><p>修改<strong>conf/server.xml</strong>文件，在<strong>GlobalNamingResources</strong>节点中添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"jdbc/bookshop"</span> <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">scope</span>=<span class="string">"jdbc/bookshop"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">driverClassName</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">url</span>=<span class="string">"jdbc:mysql://192.168.1.2:3306/bookshop"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">username</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">password</span>=<span class="string">"lu123"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">maxActive</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">maxIdle</span>=<span class="string">"30"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">maxWait</span>=<span class="string">"10000"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后接着再修改<strong>conf/context.xml</strong>文件，在<strong>Context</strong>节点中添加引用<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ResourceLink</span></span></span><br><span class="line"><span class="tag">            <span class="attr">global</span>=<span class="string">"jdbc/bookshop"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"jdbc/bookshop"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">auth</span>=<span class="string">"Container"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"javax.sql.DataSource"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>很简单，这个服务器就配置好了，最后还需要重启一下tomcat服务，别忘啦。。接下来再看看项目配置。</p><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><p>项目只是一个简单的测试Demo，首先看看<strong>pom.xml</strong>文件项目依赖配置。</p><p>###　项目依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">dependencies&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;groupId&gt;mysql&lt;/groupId&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;version&gt;6.0.3&lt;/version&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Java Servlet --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里因为我们使用JNDI技术，数据库的驱动由Tomcat容器提供，所以我们的项目中就不需要再依赖它了，这样一来灵活性也非常高了。</p><h3 id="Hibernate配置"><a href="#Hibernate配置" class="headerlink" title="Hibernate配置"></a>Hibernate配置</h3><p>这里列出简单的hibernate配置，新建一个<strong>hibernate.cfg.xml</strong>文件放置到项目<strong>classpath</strong>中，我用的是Idea，也可以放在resources目录中，添加文件内容：</p><p>hibernate.cfg.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version='1.0' encoding='utf-8'?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-configuration PUBLIC</span></span><br><span class="line"><span class="meta">    "-//Hibernate/Hibernate Configuration DTD//EN"</span></span><br><span class="line"><span class="meta">    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="connection.url"&gt;jdbc:mysql://192.168.1.2:3306/bookshop&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="connection.driver_class"&gt;com.mysql.jdbc.Driver&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="connection.username"&gt;root&lt;/property&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="connection.password"&gt;lu123&lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JNDI --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connection.datasource"</span>&gt;</span>java:comp/env/jdbc/bookshop<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hbm2ddl.auto"</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"show_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span>&gt;</span>org.hibernate.dialect.MySQL5Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.current_session_context_class"</span>&gt;</span>thread<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"Users.hbm.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>可以看到，在使用JNDI之前需要配置一大堆的东西，如:url，数据库连接用户名，密码，驱动类等等。现在使用JNDI之后，只需要提供一个数据源即可，确实比之前方便不少。<br>注意配置文件中映射了一个<strong>Users.hbm.xml</strong>文件，这个文件其实就是用hibernate映射一个JavaBean的配置文件，不过貌似现在都提倡使用注解的方式了。但是还是有可能会遇到需要维护旧的项目，而旧的项目大都是使用xml来进行配置的，所以还是了解下这个比较好。</p><p>Users.hbm.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span></span><br><span class="line"><span class="meta">        "http://www.hibernate.org/xsd/hibernate-mapping-3.0.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"com.example.hibernate.bean.Users"</span> <span class="attr">table</span>=<span class="string">"users"</span> <span class="attr">catalog</span>=<span class="string">"bookshop"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"Id"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>&gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginName"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"LoginName"</span> <span class="attr">length</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginPwd"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">"LoginPwd"</span> <span class="attr">length</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很简单，就不做过多介绍，根据这个再创建JavaBean类就行，就不贴那个了。</p><h3 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h3><p>一般JavaEE web项目都需要一个web.xml文件的，不过貌似随着Spring的潮流，提倡不需要web.xml也可以了。。但还是那句老话，旧的项目正<strong>赚钱</strong>着不可能都给推掉了。</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.hibernate.controller.UserController<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个文件很简单，就只配置一个Servlet，项目配置的东西基本上就都说完了，现在再来看看项目代码结构了。</p><h2 id="项目代码结构"><a href="#项目代码结构" class="headerlink" title="项目代码结构"></a>项目代码结构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/JNDI_project.jpg" alt="Idea" title>                </div>                <div class="image-caption">Idea</div>            </figure><p>我使用的是IntelliJ IDEA，据说这个是Java中最好的IDE。。<br>项目结构也很简单，能省的都给省了。<br>先看一下<strong>HibernateSessionFactory.java</strong>这个文件，它主要就是在项目中引入Hibernate的配置，并获取到Session，而我们增删改查等操作就都是通过这个Session来控制的。</p><p>HibernateSessionFactory.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hibernate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Administrator on 2016/9/25.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateSessionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Configuration configure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SessionFactory sessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        configure = <span class="keyword">new</span> Configuration().configure();</span><br><span class="line">        sessionFactory = configure.buildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也很简单的操作，就是根据配置文件来获取Session的，而Hibernate的实际操作就是通过这个Session来完成的。<br>我们先从DAO层开始，来看下<strong>BaseHibernateDAO.java</strong>文件</p><p>BaseHibernateDAO.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">package com.example.hibernate.dao;</span><br><span class="line"></span><br><span class="line">import com.example.hibernate.HibernateSessionFactory;</span><br><span class="line">import org.hibernate.Session;</span><br><span class="line">import org.hibernate.Transaction;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2016/9/25.</span><br><span class="line"> */</span><br><span class="line">public abstract class BaseHibernateDAO &#123;</span><br><span class="line"></span><br><span class="line">    protected void add(Object object) &#123;</span><br><span class="line">        Transaction tx = null;</span><br><span class="line"></span><br><span class="line">        // 获取session</span><br><span class="line">        Session session = HibernateSessionFactory.getSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            // 开始事务</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line"></span><br><span class="line">            // 持久化操作</span><br><span class="line">            session.save(object);</span><br><span class="line"></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            if (tx != null) &#123;</span><br><span class="line">                // 回滚事务</span><br><span class="line">                tx.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            // 关闭session</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    protected Object get(Class cla, Serializable id) &#123;</span><br><span class="line">        Object obj = null;</span><br><span class="line"></span><br><span class="line">        Session session = HibernateSessionFactory.getSession();</span><br><span class="line">        try &#123;</span><br><span class="line">            obj = session.get(cla, id);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected void delete(Object object) &#123;</span><br><span class="line"></span><br><span class="line">        Transaction tx = null;</span><br><span class="line"></span><br><span class="line">        Session session = HibernateSessionFactory.getSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line">            session.delete(object);</span><br><span class="line"></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            if (tx != null) &#123;</span><br><span class="line">                tx.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    protected void update(Object object) &#123;</span><br><span class="line">        Transaction tx = null;</span><br><span class="line">        Session session = HibernateSessionFactory.getSession();</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            tx = session.beginTransaction();</span><br><span class="line">            session.update(object);</span><br><span class="line"></span><br><span class="line">            tx.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            if (tx != null) &#123;</span><br><span class="line">                tx.rollback();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            session.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也很简单，毕竟只是为了演示测试使用，真正的项目肯定不应该这样的。<br>再来看看<strong>UserDAO.java</strong>文件，它主要是提供了上层能够操作的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.hibernate.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.hibernate.bean.Users;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Administrator on 2016/9/25.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Users users)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Users users)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Users <span class="title">load</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Users users)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserDAOImpl.java也没什么内容，其实就是我懒。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.example.hibernate.dao;</span><br><span class="line"></span><br><span class="line">import com.example.hibernate.bean.Users;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2016/9/25.</span><br><span class="line"> */</span><br><span class="line">public class UserDAOImpl extends BaseHibernateDAO implements UserDAO &#123;</span><br><span class="line">    public void add(Users users) &#123;</span><br><span class="line">        super.add(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void delete(Users users) &#123;</span><br><span class="line">        super.delete(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Users load(Integer id) &#123;</span><br><span class="line">        return (Users) super.get(Users.class, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void update(Users users) &#123;</span><br><span class="line">        super.update(users);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看关键的Controller，主要就是响应web页面的请求的。</p><p>UserController.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.example.hibernate.controller;</span><br><span class="line"></span><br><span class="line">import com.example.hibernate.bean.Users;</span><br><span class="line">import com.example.hibernate.dao.UserDAO;</span><br><span class="line">import com.example.hibernate.dao.UserDAOImpl;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2016/10/2.</span><br><span class="line"> */</span><br><span class="line">public class UserController extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        UserDAO dao = new UserDAOImpl();</span><br><span class="line">        Users load = dao.load(3);</span><br><span class="line"></span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(&quot;get = &quot; + load.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也很简单，相信初学者也都能看懂，当然了我也是一个Web的初学者，之前都是做Android应用开发，现在是做Android系统Framework开发，而未来我打算想做Web后端开发，努力学习ing…</p><p>哦，对了。还有最关键的数据库方面还没说。。</p><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/bookshop_tb.png" alt="Mysql user data" title>                </div>                <div class="image-caption">Mysql user data</div>            </figure><p>使用Navicat for MySQL可以很方便设计数据库表和进行增删改查等操作，挺强大的一个功能是还能从excel表格中导入数据。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/bookshop_des.png" alt="mysql user design" title>                </div>                <div class="image-caption">mysql user design</div>            </figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好了，一个简单Hibernate+JNDI配置就说到这吧。当然，配置的方式有很多种，但是只要适合自己就好了。<br>这里最后再吐槽一句，网上的教程一大堆也太不完整了，东一点西一点的，说一大堆还是不会用。即使是只作为自己的一个笔记，起码也要说清楚一点比较好吧，万一后来自己再来翻的时候都看不懂，那就笑了。<br>而作为一个教程类，起码得要能run跑起来吧？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚开始使用JNDI，网上也查了不少资料，磕磕盼盼鼓捣了大半天才成功，在此记录一下。&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;首先还是再啰嗦两句，介绍一下JNDI技术。
      
    
    </summary>
    
      <category term="Web" scheme="https://lusyoe.github.io/categories/Web/"/>
    
    
      <category term="Hibernate" scheme="https://lusyoe.github.io/tags/Hibernate/"/>
    
      <category term="JNDI" scheme="https://lusyoe.github.io/tags/JNDI/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins远程部署war包到tomcat</title>
    <link href="https://lusyoe.github.io/2016/09/27/Jenkins%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2war%E5%8C%85%E5%88%B0tomcat/"/>
    <id>https://lusyoe.github.io/2016/09/27/Jenkins远程部署war包到tomcat/</id>
    <published>2016-09-27T13:46:33.000Z</published>
    <updated>2019-04-07T14:27:39.180Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于这个的文章也是数不胜数了，但是稍不注意还是会掉坑里了，好不容易配置成功在这里记录一下。<br>关于怎么搭建Jenkins自动构建之前已经写过，这里就再补充一下自动远程部署的情况。</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在开始之前，服务器上需要有安装好环境，如：JDK，Tomcat等<br>配置好环境变量同时，在Jenkins和Gitlab上创建好项目。</p><h1 id="项目文件配置"><a href="#项目文件配置" class="headerlink" title="项目文件配置"></a>项目文件配置</h1><p>来依次看一下关于项目的文件配置，包括Maven的配置等。</p><h3 id="pom-xml配置"><a href="#pom-xml配置" class="headerlink" title="pom.xml配置"></a>pom.xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">warPackageName</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">warPackageName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tomcat.deploy.server</span>&gt;</span>tomcat8<span class="tag">&lt;/<span class="name">tomcat.deploy.server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tomcat.deploy.serverUrl</span>&gt;</span>http://192.168.1.2:8088/manager/text<span class="tag">&lt;/<span class="name">tomcat.deploy.serverUrl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">server</span>&gt;</span>$&#123;tomcat.deploy.server&#125;<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>$&#123;tomcat.deploy.serverUrl&#125;<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/$&#123;warPackageName&#125;<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我这里tomcat版本使用的8，如果使用的是tomcat6.x的话，serverUrl需要改为<code>http://192.168.1.2:8080/manager</code>。<br>在这里<code>&lt;tomcat.deploy.server&gt;tomcat8&lt;/tomcat.deploy.server&gt;</code>，其中tomcat8是需要在Maven的<strong>.settings.xml</strong>文件中配置的。</p><h3 id="Maven-settings配置"><a href="#Maven-settings配置" class="headerlink" title="Maven settings配置"></a>Maven settings配置</h3><p>~/.m2/.settings.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>lhy123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>tomcat8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>deployer<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>internal nexus repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.2:8081/repository/maven-central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里主要是看server中的tomcat8配置，需要tomcat的用户名和密码。至于其他的是关于nexus的配置，以后有机会再写一篇详细说明Nexus的吧。<br>tomcat的用户名和密码就需要我们到服务器上去配置了。</p><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>服务器上主要是<strong>tomcat用户配置</strong>和<strong>Maven settings配置</strong>。<br>是的，本地配置那个是方便在本地就可以直接部署到服务器，但是如果是用Jenkins来帮我们自动的部署的话就需要在服务器上也配置一下Maven Settings了，否则在构建好后是无法进行远程部署的，因为不知道tomcat的用户名和密码。<br>在这里我们直接复制本地的.settings.xml文件到服务器就好，也有个地方需要注意了。<br><strong>.settings.xml</strong>这个文件不是随便放的，需要放到启动jenkins的用户的那个home目录下面的.m2/目录中。<br>因为我是直接从<a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins官网</a>下载了war包，然后丢到tomcat中运行的。<br>所以这里我需要将<strong>.settings.xml</strong>文件放到<code>/usr/share/tomcat8/.m2/</code>中。<br>需要注意的是文件权限问题，我是为了偷懒直接用系统<code># apt-get install tomcat8</code>安装的，系统会自动创建tomcat8用户。<br>所以还需要额外执行一条命令：<code># chown tomcat8:tomcat8 .settings.xml</code>即可。<br>如果是自己从<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">apache tomcat官网</a>下载的压缩包的话，就看你启动tomcat服务用的哪个系统用户了，就把<strong>.settings.xml</strong>文件丢到那个用户的<code>$HOME/.m2/</code>下即可。</p><h3 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h3><p>先在tomcat用户配置文件中添加一个用户，并给予<strong>manager-script</strong>权限就行。<br>在我这里是编辑<code>/etc/tomcat8/tomcat-users.xml</code>文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin-gui"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"tomcat"</span> <span class="attr">password</span>=<span class="string">"tomcat"</span> <span class="attr">roles</span>=<span class="string">"admin-gui,manager-gui"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"deployer"</span> <span class="attr">password</span>=<span class="string">"dev"</span> <span class="attr">roles</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>主要看deployer这个用户就行了。</p><h3 id="Jenkins构建配置"><a href="#Jenkins构建配置" class="headerlink" title="Jenkins构建配置"></a>Jenkins构建配置</h3><p>好了，最后再说一下，在Jenkins中执行的构建命令<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/image/maven-build.png" alt="maven-build" title>                </div>                <div class="image-caption">maven-build</div>            </figure><br>这里需要注意,执行的是<strong>mvn tomcat:redeploy</strong>。<br>网上很多教程说的是<strong>mvn tomcat7:redeploy</strong>，我这边死活不行，总是报错。<br><code>No plugin found for prefix &#39;tomcat7&#39; in the current project.</code><br>暂时不知道是什么原因，先不管了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>做开发的就是一路趟坑啊，尤其是web方面。感觉就这么一点小小的东西都折腾了好一番，真是路漫漫兮其修远矣。但是为了前途咱还是得一路顶上去呢，吾必将上下而求索~</p><p>致还在年轻奋斗的我们。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上关于这个的文章也是数不胜数了，但是稍不注意还是会掉坑里了，好不容易配置成功在这里记录一下。&lt;br&gt;关于怎么搭建Jenkins自动构建之前已经写过，这里就再补充一下自动远程部署的情况。&lt;/p&gt;
&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;header
      
    
    </summary>
    
      <category term="CI持续集成" scheme="https://lusyoe.github.io/categories/CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="CI持续集成" scheme="https://lusyoe.github.io/tags/CI%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA使用JpaRepository自动装配报No qualifying bean of type错误</title>
    <link href="https://lusyoe.github.io/2016/09/22/Spring-Data-JPA%E4%BD%BF%E7%94%A8JpaRepository%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%8A%A5No-qualifying-bean-of-type%E9%94%99%E8%AF%AF/"/>
    <id>https://lusyoe.github.io/2016/09/22/Spring-Data-JPA使用JpaRepository自动装配报No-qualifying-bean-of-type错误/</id>
    <published>2016-09-22T13:50:31.000Z</published>
    <updated>2019-04-07T14:27:39.177Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到一个问题折腾蛮久的，在这里记录一下。<br>毕竟是才刚开始使用Jpa这个技术，总是会遇到各种配置问题。<br>使用Spring Data Jpa非常的方便，一些简单的操作基本上都不用写具体的实现，<br>直接写一个接口继承JpaRepository就行了，注意需要带有一个泛型。k = 表映射的实体类，value = 表的Id类型。</p><p>在使用的时候直接自动装配就好。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> xxxRepository repository;</span><br></pre></td></tr></table></figure><p>然后就可以使用一些常用的数据库操作，如：findxxx、delete、save。<br>不过默认没有<code>update</code>方法，如果需要的话，就要在接口中再添加。</p><p>好了，说下我遇到的那个问题。<br><code>Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [com.example.rest.repository.UserRepository] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}</code><br>写个Demo自动装配的时候，测试报这个错误。<br>检查一下spring配置文件，才发现少了声明repository所在包位置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 表示JPA Repository所在的包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jpa:repositories</span> <span class="attr">base-package</span>=<span class="string">"com.example.rest.repository"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>添加以上配置即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天遇到一个问题折腾蛮久的，在这里记录一下。&lt;br&gt;毕竟是才刚开始使用Jpa这个技术，总是会遇到各种配置问题。&lt;br&gt;使用Spring Data Jpa非常的方便，一些简单的操作基本上都不用写具体的实现，&lt;br&gt;直接写一个接口继承JpaRepository就行了，注意需要带
      
    
    </summary>
    
      <category term="Spring" scheme="https://lusyoe.github.io/categories/Spring/"/>
    
    
      <category term="Web" scheme="https://lusyoe.github.io/tags/Web/"/>
    
      <category term="Spring" scheme="https://lusyoe.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data JPA配置出现Not a managed type错误</title>
    <link href="https://lusyoe.github.io/2016/09/20/Spring-Data-JPA%E9%85%8D%E7%BD%AE%E5%87%BA%E7%8E%B0Not-a-managed-type%E9%94%99%E8%AF%AF/"/>
    <id>https://lusyoe.github.io/2016/09/20/Spring-Data-JPA配置出现Not-a-managed-type错误/</id>
    <published>2016-09-20T11:25:46.000Z</published>
    <updated>2019-04-07T14:27:39.181Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习Spring框架，配置数据库连接的时候出现这个错误。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: Not a managed type: <span class="class"><span class="keyword">class</span> ...</span></span><br></pre></td></tr></table></figure></p><p>才刚学不久，被这个问题折腾了有一会，后来检查的时候无意中发现在<strong>persistence.xml</strong>文件漏了东西啦。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JPA的提供者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">provider</span>&gt;</span>org.hibernate.jpa.HibernatePersistenceProvider<span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">class</span>&gt;</span>com.example.usermanage.model.User<span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p>之前在上面的配置的时候，少添加了<code>&lt;class&gt;com.example.usermanage.model.User&lt;/class&gt;</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习Spring框架，配置数据库连接的时候出现这个错误。&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre
      
    
    </summary>
    
      <category term="Spring" scheme="https://lusyoe.github.io/categories/Spring/"/>
    
    
      <category term="Web" scheme="https://lusyoe.github.io/tags/Web/"/>
    
      <category term="Spring" scheme="https://lusyoe.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Debian 8桌面安装Nvidia GTX960显卡驱动</title>
    <link href="https://lusyoe.github.io/2016/09/04/Debian-8%E6%A1%8C%E9%9D%A2%E5%AE%89%E8%A3%85Nvidia-GTX960%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    <id>https://lusyoe.github.io/2016/09/04/Debian-8桌面安装Nvidia-GTX960显卡驱动/</id>
    <published>2016-09-04T12:55:52.000Z</published>
    <updated>2019-04-07T14:27:39.172Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>还是上次那个朋友，帮他把组装电脑装好Debian系统后，首先是出现USB无线网卡驱动问题，现在又是出现显卡驱动问题。<br>因为没有安装显卡闭源驱动，每次开机都会出现提示<code>没有使用硬件加速，不推荐使用</code>之类的信息，整个系统界面也显示的很模糊。<br>这是因为默认使用的是内核中自带的开源驱动，效果肯定很差了。没办法了，只能叫我来帮他安装驱动了。</p><a id="more"></a><h1 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h1><p>好歹也算是一名Linux的老鸟了，肯定不能像一个新手一样去百度搜那些杂乱、过时的信息。<br>刚开始我也经常这样做，结果搞得系统总是出问题，经过了多次重装系统的惨烈经历后，慢慢就总结出来经验了。<br>像这种东西，必须要先去查看<strong>官方wiki</strong>。如果官方还没有支持的话，再去<strong>google</strong>搜索第三方是如何安装的。<br>不过这次很幸运，目前Debian官方已经支持Nvidia GTX960显卡驱动安装了，不过如果系统是Debian稳定版的话就必须要添加backports源了。</p><h3 id="查看显卡型号"><a href="#查看显卡型号" class="headerlink" title="查看显卡型号"></a>查看显卡型号</h3><p><code># lspci -nn |grep VGA</code></p><p>以下命令确保都在root用户下运行。</p><h3 id="添加backports源"><a href="#添加backports源" class="headerlink" title="添加backports源"></a>添加backports源</h3><p><code># echo &quot;deb http://httpredir.debian.org/debian jessie-backports main contrib non-free&quot; &gt;&gt; /etc/apt/sources.list</code><br>更新源<br><code># apt-get update</code></p><h3 id="安装Linux-headers"><a href="#安装Linux-headers" class="headerlink" title="安装Linux headers"></a>安装Linux headers</h3><p>因为驱动会依赖一些Linux headers库。<br><code># apt-get install linux-headers-$(uname -r|sed &#39;s,[^-]*-[^-]*-,,&#39;)</code></p><h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><p><code># apt-get install -t jessie-backports nvidia-driver</code><br>安装的过程中可能会提示与当前的正在使用的开源驱动nouveau冲突，不用理会确定即可。<br>安装程序会将开源驱动默认添加到<strong>blacklist</strong>中，安装成功后，需要重启一下系统就好啦。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>驱动安装好后，重启进入系统，再也没有那个<strong>未使用硬件加速</strong>提示了，整个界面也显示的非常清晰。<br>有和没有驱动区别还是相当大的，之前都听别人说Linux中显卡驱动怎么怎么的坑。虽然我之前也没折腾过这个，<br>一是：我的笔记本比较老式了i3 u，只使用cpu中的集显，也没遇到过显卡驱动方面的坑。<br>二是：自从买了E5的服务器装好Debian后，我就把笔记本换回了win7，服务器当然不需要图形界面和显卡啦，而Windows的驱动安装更是简单，不多说了。</p><p>这次帮朋友安装，才知道了，Linux现在在桌面方面长进还是非常大的。<br>最后是瑾记一句话：<br>千万不要再随意帮别人装系统。<br>千万不要再随意帮别人装系统。<br>千万不要再随意帮别人装系统。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>Debian Nividia显卡驱动wiki： <a href="https://wiki.debian.org/NvidiaGraphicsDrivers" target="_blank" rel="noopener">https://wiki.debian.org/NvidiaGraphicsDrivers</a><br>最新驱动版本支持的型号： <a href="http://us.download.nvidia.com/XFree86/Linux-x86_64/352.79/README/supportedchips.html" target="_blank" rel="noopener">http://us.download.nvidia.com/XFree86/Linux-x86_64/352.79/README/supportedchips.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;还是上次那个朋友，帮他把组装电脑装好Debian系统后，首先是出现USB无线网卡驱动问题，现在又是出现显卡驱动问题。&lt;br&gt;因为没有安装显卡闭源驱动，每次开机都会出现提示&lt;code&gt;没有使用硬件加速，不推荐使用&lt;/code&gt;之类的信息，整个系统界面也显示的很模糊。&lt;br&gt;这是因为默认使用的是内核中自带的开源驱动，效果肯定很差了。没办法了，只能叫我来帮他安装驱动了。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://lusyoe.github.io/categories/Linux/"/>
    
    
      <category term="显卡驱动" scheme="https://lusyoe.github.io/tags/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/"/>
    
      <category term="Linux驱动" scheme="https://lusyoe.github.io/tags/Linux%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>MySQL基础之视图实战篇</title>
    <link href="https://lusyoe.github.io/2016/09/03/MySQL%E5%9F%BA%E7%A1%80%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%AE%9E%E6%88%98%E7%AF%87/"/>
    <id>https://lusyoe.github.io/2016/09/03/MySQL基础之视图实战篇/</id>
    <published>2016-09-03T02:05:49.000Z</published>
    <updated>2019-04-07T14:27:39.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h1><p>基本语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>][ALGORITHM = &#123;UNDEFINED | <span class="keyword">MERGE</span> |TEMPTABLE&#125;]</span><br><span class="line">    <span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line">    <span class="keyword">AS</span> SELECT_statement</span><br><span class="line">    [<span class="keyword">WITH</span>[<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></figure></p><p>其中，<strong>CREATE</strong> 表示创建新的视图，<strong>REPLACE</strong>表示替换已经创建的视图;<strong>ALGORITHM</strong>表示视图选择的算法；<br><strong>view_name</strong> 为视图的名称，<strong>column_list</strong>为属性列；<strong>SELECT_statement</strong>表示<code>SELECT</code>语句;<br><strong>WITH [CASCADED | LOCAL] CHECK OPTION</strong>参数表示视图在更新时保证在视图的权限范围之内。</p><h3 id="在单表上创建视图"><a href="#在单表上创建视图" class="headerlink" title="在单表上创建视图"></a>在单表上创建视图</h3><p>视图是基于表之上的虚拟表，所以必须要先有表。</p><ul><li><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t(</span><br><span class="line">    <span class="keyword">id</span>       <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">    quantity <span class="built_in">INT</span>,</span><br><span class="line">    price    <span class="keyword">DOUBLE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>创建视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_t <span class="keyword">AS</span> <span class="keyword">SELECT</span> quantity, price, quantity*price <span class="keyword">AS</span> total <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></li></ul><h3 id="在多表上创建视图"><a href="#在多表上创建视图" class="headerlink" title="在多表上创建视图"></a>在多表上创建视图</h3><ul><li>创建表<br>表1:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">  <span class="keyword">id</span>     <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="built_in">number</span> <span class="built_in">INT</span>,</span><br><span class="line">  <span class="keyword">name</span>   <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>表2:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stutent_info(</span><br><span class="line">  <span class="keyword">id</span>      <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">class</span>   <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">  address <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><ul><li>创建视图<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> stu_glass(<span class="keyword">id</span>, <span class="keyword">name</span>, glass) <span class="keyword">AS</span> <span class="keyword">SELECT</span> student.id, student.name, stutent_info.class</span><br><span class="line"><span class="keyword">FROM</span> student, student_info <span class="keyword">WHERE</span> student.id=student_info.id;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看视图"><a href="#查看视图" class="headerlink" title="查看视图"></a>查看视图</h2><p>视图创建好了后，可以查看视图的一些信息，如以下几种:</p><ul><li><p>查看视图描述<br>与表类似<br><code>DESC stu_glass;</code></p></li><li><p>查看视图定义<br><code>SHOW CREATE VIEW stu_glass;</code></p></li></ul><h2 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h2><p>当数据库中的基本表某些字段发生变化的时候，可以通过修改视图来保持与基本表的一致性。<br>在Mysql中可以通过<code>CREATE OR REPLACE VIEW</code>语句和<code>ALTER</code>语句来修改视图。</p><ul><li><strong>CREATE OR REPLACE VIEW</strong>语句<br>使用改语句时，如果视图已经存在则对视图进行修改，当视图不存在时，就创建视图。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> view_t <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></li></ul><p>可通过<code>DESC view_t</code>语句来查看修改后的视图结构。</p><ul><li><strong>ALTER</strong>语句<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> view_t <span class="keyword">AS</span> <span class="keyword">SELECT</span> quantity <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></li></ul><h2 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h2><p>更新视图是指通过视图来插入、更新、删除表中的数据，因为视图是一个虚拟表，其中没有数据。<br>通过视图更新的时候都是转到基本表上进行更新的，如果对视图增加或者删除记录，实际上是对其基本表增加或者删除记录。</p><ul><li><p><strong>UPDATE</strong>语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> view_t <span class="keyword">SET</span> quantity=<span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>INSERT</strong>语句<br>在基本表中插入语句，其关联视图也会进行相应改变的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t <span class="keyword">VALUES</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> view_t;</span><br></pre></td></tr></table></figure></li><li><p><strong>DELETE</strong>语句<br>在视图中删除一行数据，其基本表也会进行相应的删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> view_t <span class="keyword">WHERE</span> price=<span class="number">50</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><p>当视图不再需要时，可以将其删除，删除一个或多个视图可以使用<code>DROP VIEW</code>语句。语法如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>]</span><br><span class="line">    view_name [, view_name]...</span><br><span class="line">    [RESTRICT | <span class="keyword">CASCADE</span>]</span><br></pre></td></tr></table></figure></p><p>例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> stu_glass;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;创建视图&quot;&gt;&lt;a href=&quot;#创建视图&quot; class=&quot;headerlink&quot; title=&quot;创建视图&quot;&gt;&lt;/a&gt;创建视图&lt;/h1&gt;&lt;p&gt;基本语法：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="MySQL" scheme="https://lusyoe.github.io/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://lusyoe.github.io/tags/MySQL/"/>
    
      <category term="视图" scheme="https://lusyoe.github.io/tags/%E8%A7%86%E5%9B%BE/"/>
    
  </entry>
  
</feed>
